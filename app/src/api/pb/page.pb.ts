// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: page.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as block from "./block.pb";
import * as base from "./base.pb";

//========================================//
//                 Types                  //
//========================================//

export interface Page {
  pageUlid: string;
  title: string;
  summary: string;
  dateCreated: string;
  dateModified: string;
  siteUlid: string;
  slug: string;
}

export interface PageWithBlockWithImage {
  pageUlid: string;
  title: string;
  summary: string;
  dateCreated: string;
  dateModified: string;
  siteUlid: string;
  slug: string;
  mainNav: NavLink[];
  blocks: block.BlockWithImage[];
}

export interface Pages {
  pages: Page[];
}

export interface NavLink {
  slug: string;
  title: string;
}

export interface PagesPaged {
  pagedInfo: base.PagedInfo;
  records: Page[];
}

//========================================//
//        PageRPC Protobuf Client         //
//========================================//

export async function LoadPage(
  lookup: base.Lookup,
  config?: ClientConfiguration,
): Promise<Page> {
  const response = await PBrequest(
    "/skeleton.PageRPC/LoadPage",
    base.Lookup.encode(lookup),
    config,
  );
  return Page.decode(response);
}

export async function LoadFullPage(
  lookup: base.Lookup,
  config?: ClientConfiguration,
): Promise<PageWithBlockWithImage> {
  const response = await PBrequest(
    "/skeleton.PageRPC/LoadFullPage",
    base.Lookup.encode(lookup),
    config,
  );
  return PageWithBlockWithImage.decode(response);
}

export async function SavePage(
  page: Page,
  config?: ClientConfiguration,
): Promise<Page> {
  const response = await PBrequest(
    "/skeleton.PageRPC/SavePage",
    Page.encode(page),
    config,
  );
  return Page.decode(response);
}

export async function SaveFullPage(
  pageWithBlockWithImage: PageWithBlockWithImage,
  config?: ClientConfiguration,
): Promise<PageWithBlockWithImage> {
  const response = await PBrequest(
    "/skeleton.PageRPC/SaveFullPage",
    PageWithBlockWithImage.encode(pageWithBlockWithImage),
    config,
  );
  return PageWithBlockWithImage.decode(response);
}

export async function PagedPages(
  pagedInfo: base.PagedInfo,
  config?: ClientConfiguration,
): Promise<PagesPaged> {
  const response = await PBrequest(
    "/skeleton.PageRPC/PagedPages",
    base.PagedInfo.encode(pagedInfo),
    config,
  );
  return PagesPaged.decode(response);
}

export async function DeletePage(
  lookup: base.Lookup,
  config?: ClientConfiguration,
): Promise<base.Deleted> {
  const response = await PBrequest(
    "/skeleton.PageRPC/DeletePage",
    base.Lookup.encode(lookup),
    config,
  );
  return base.Deleted.decode(response);
}

//========================================//
//          PageRPC JSON Client           //
//========================================//

export async function LoadPageJSON(
  lookup: base.Lookup,
  config?: ClientConfiguration,
): Promise<Page> {
  const response = await JSONrequest(
    "/skeleton.PageRPC/LoadPage",
    base.LookupJSON.encode(lookup),
    config,
  );
  return PageJSON.decode(response);
}

export async function LoadFullPageJSON(
  lookup: base.Lookup,
  config?: ClientConfiguration,
): Promise<PageWithBlockWithImage> {
  const response = await JSONrequest(
    "/skeleton.PageRPC/LoadFullPage",
    base.LookupJSON.encode(lookup),
    config,
  );
  return PageWithBlockWithImageJSON.decode(response);
}

export async function SavePageJSON(
  page: Page,
  config?: ClientConfiguration,
): Promise<Page> {
  const response = await JSONrequest(
    "/skeleton.PageRPC/SavePage",
    PageJSON.encode(page),
    config,
  );
  return PageJSON.decode(response);
}

export async function SaveFullPageJSON(
  pageWithBlockWithImage: PageWithBlockWithImage,
  config?: ClientConfiguration,
): Promise<PageWithBlockWithImage> {
  const response = await JSONrequest(
    "/skeleton.PageRPC/SaveFullPage",
    PageWithBlockWithImageJSON.encode(pageWithBlockWithImage),
    config,
  );
  return PageWithBlockWithImageJSON.decode(response);
}

export async function PagedPagesJSON(
  pagedInfo: base.PagedInfo,
  config?: ClientConfiguration,
): Promise<PagesPaged> {
  const response = await JSONrequest(
    "/skeleton.PageRPC/PagedPages",
    base.PagedInfoJSON.encode(pagedInfo),
    config,
  );
  return PagesPagedJSON.decode(response);
}

export async function DeletePageJSON(
  lookup: base.Lookup,
  config?: ClientConfiguration,
): Promise<base.Deleted> {
  const response = await JSONrequest(
    "/skeleton.PageRPC/DeletePage",
    base.LookupJSON.encode(lookup),
    config,
  );
  return base.DeletedJSON.decode(response);
}

//========================================//
//                PageRPC                 //
//========================================//

export interface PageRPC<Context = unknown> {
  LoadPage: (lookup: base.Lookup, context: Context) => Promise<Page> | Page;
  LoadFullPage: (
    lookup: base.Lookup,
    context: Context,
  ) => Promise<PageWithBlockWithImage> | PageWithBlockWithImage;
  SavePage: (page: Page, context: Context) => Promise<Page> | Page;
  SaveFullPage: (
    pageWithBlockWithImage: PageWithBlockWithImage,
    context: Context,
  ) => Promise<PageWithBlockWithImage> | PageWithBlockWithImage;
  PagedPages: (
    pagedInfo: base.PagedInfo,
    context: Context,
  ) => Promise<PagesPaged> | PagesPaged;
  DeletePage: (
    lookup: base.Lookup,
    context: Context,
  ) => Promise<base.Deleted> | base.Deleted;
}

export function createPageRPC<Context>(service: PageRPC<Context>) {
  return {
    name: "skeleton.PageRPC",
    methods: {
      LoadPage: {
        name: "LoadPage",
        handler: service.LoadPage,
        input: { protobuf: base.Lookup, json: base.LookupJSON },
        output: { protobuf: Page, json: PageJSON },
      },
      LoadFullPage: {
        name: "LoadFullPage",
        handler: service.LoadFullPage,
        input: { protobuf: base.Lookup, json: base.LookupJSON },
        output: {
          protobuf: PageWithBlockWithImage,
          json: PageWithBlockWithImageJSON,
        },
      },
      SavePage: {
        name: "SavePage",
        handler: service.SavePage,
        input: { protobuf: Page, json: PageJSON },
        output: { protobuf: Page, json: PageJSON },
      },
      SaveFullPage: {
        name: "SaveFullPage",
        handler: service.SaveFullPage,
        input: {
          protobuf: PageWithBlockWithImage,
          json: PageWithBlockWithImageJSON,
        },
        output: {
          protobuf: PageWithBlockWithImage,
          json: PageWithBlockWithImageJSON,
        },
      },
      PagedPages: {
        name: "PagedPages",
        handler: service.PagedPages,
        input: { protobuf: base.PagedInfo, json: base.PagedInfoJSON },
        output: { protobuf: PagesPaged, json: PagesPagedJSON },
      },
      DeletePage: {
        name: "DeletePage",
        handler: service.DeletePage,
        input: { protobuf: base.Lookup, json: base.LookupJSON },
        output: { protobuf: base.Deleted, json: base.DeletedJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Page = {
  /**
   * Serializes Page to protobuf.
   */
  encode: function (msg: PartialDeep<Page>): Uint8Array {
    return Page._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Page from protobuf.
   */
  decode: function (bytes: ByteSource): Page {
    return Page._readMessage(
      Page.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Page with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Page>): Page {
    return {
      pageUlid: "",
      title: "",
      summary: "",
      dateCreated: "",
      dateModified: "",
      siteUlid: "",
      slug: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Page>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.pageUlid) {
      writer.writeString(1, msg.pageUlid);
    }
    if (msg.title) {
      writer.writeString(2, msg.title);
    }
    if (msg.summary) {
      writer.writeString(3, msg.summary);
    }
    if (msg.dateCreated) {
      writer.writeString(4, msg.dateCreated);
    }
    if (msg.dateModified) {
      writer.writeString(5, msg.dateModified);
    }
    if (msg.siteUlid) {
      writer.writeString(6, msg.siteUlid);
    }
    if (msg.slug) {
      writer.writeString(7, msg.slug);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Page, reader: protoscript.BinaryReader): Page {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.pageUlid = reader.readString();
          break;
        }
        case 2: {
          msg.title = reader.readString();
          break;
        }
        case 3: {
          msg.summary = reader.readString();
          break;
        }
        case 4: {
          msg.dateCreated = reader.readString();
          break;
        }
        case 5: {
          msg.dateModified = reader.readString();
          break;
        }
        case 6: {
          msg.siteUlid = reader.readString();
          break;
        }
        case 7: {
          msg.slug = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PageWithBlockWithImage = {
  /**
   * Serializes PageWithBlockWithImage to protobuf.
   */
  encode: function (msg: PartialDeep<PageWithBlockWithImage>): Uint8Array {
    return PageWithBlockWithImage._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PageWithBlockWithImage from protobuf.
   */
  decode: function (bytes: ByteSource): PageWithBlockWithImage {
    return PageWithBlockWithImage._readMessage(
      PageWithBlockWithImage.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes PageWithBlockWithImage with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<PageWithBlockWithImage>,
  ): PageWithBlockWithImage {
    return {
      pageUlid: "",
      title: "",
      summary: "",
      dateCreated: "",
      dateModified: "",
      siteUlid: "",
      slug: "",
      mainNav: [],
      blocks: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PageWithBlockWithImage>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.pageUlid) {
      writer.writeString(1, msg.pageUlid);
    }
    if (msg.title) {
      writer.writeString(2, msg.title);
    }
    if (msg.summary) {
      writer.writeString(3, msg.summary);
    }
    if (msg.dateCreated) {
      writer.writeString(4, msg.dateCreated);
    }
    if (msg.dateModified) {
      writer.writeString(5, msg.dateModified);
    }
    if (msg.siteUlid) {
      writer.writeString(6, msg.siteUlid);
    }
    if (msg.slug) {
      writer.writeString(7, msg.slug);
    }
    if (msg.mainNav?.length) {
      writer.writeRepeatedMessage(8, msg.mainNav as any, NavLink._writeMessage);
    }
    if (msg.blocks?.length) {
      writer.writeRepeatedMessage(
        9,
        msg.blocks as any,
        block.BlockWithImage._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PageWithBlockWithImage,
    reader: protoscript.BinaryReader,
  ): PageWithBlockWithImage {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.pageUlid = reader.readString();
          break;
        }
        case 2: {
          msg.title = reader.readString();
          break;
        }
        case 3: {
          msg.summary = reader.readString();
          break;
        }
        case 4: {
          msg.dateCreated = reader.readString();
          break;
        }
        case 5: {
          msg.dateModified = reader.readString();
          break;
        }
        case 6: {
          msg.siteUlid = reader.readString();
          break;
        }
        case 7: {
          msg.slug = reader.readString();
          break;
        }
        case 8: {
          const m = NavLink.initialize();
          reader.readMessage(m, NavLink._readMessage);
          msg.mainNav.push(m);
          break;
        }
        case 9: {
          const m = block.BlockWithImage.initialize();
          reader.readMessage(m, block.BlockWithImage._readMessage);
          msg.blocks.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Pages = {
  /**
   * Serializes Pages to protobuf.
   */
  encode: function (msg: PartialDeep<Pages>): Uint8Array {
    return Pages._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Pages from protobuf.
   */
  decode: function (bytes: ByteSource): Pages {
    return Pages._readMessage(
      Pages.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Pages with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Pages>): Pages {
    return {
      pages: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Pages>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.pages?.length) {
      writer.writeRepeatedMessage(1, msg.pages as any, Page._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Pages, reader: protoscript.BinaryReader): Pages {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Page.initialize();
          reader.readMessage(m, Page._readMessage);
          msg.pages.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const NavLink = {
  /**
   * Serializes NavLink to protobuf.
   */
  encode: function (msg: PartialDeep<NavLink>): Uint8Array {
    return NavLink._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes NavLink from protobuf.
   */
  decode: function (bytes: ByteSource): NavLink {
    return NavLink._readMessage(
      NavLink.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes NavLink with all fields set to their default value.
   */
  initialize: function (msg?: Partial<NavLink>): NavLink {
    return {
      slug: "",
      title: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<NavLink>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.slug) {
      writer.writeString(1, msg.slug);
    }
    if (msg.title) {
      writer.writeString(2, msg.title);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: NavLink,
    reader: protoscript.BinaryReader,
  ): NavLink {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.slug = reader.readString();
          break;
        }
        case 2: {
          msg.title = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PagesPaged = {
  /**
   * Serializes PagesPaged to protobuf.
   */
  encode: function (msg: PartialDeep<PagesPaged>): Uint8Array {
    return PagesPaged._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PagesPaged from protobuf.
   */
  decode: function (bytes: ByteSource): PagesPaged {
    return PagesPaged._readMessage(
      PagesPaged.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes PagesPaged with all fields set to their default value.
   */
  initialize: function (msg?: Partial<PagesPaged>): PagesPaged {
    return {
      pagedInfo: base.PagedInfo.initialize(),
      records: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PagesPaged>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.pagedInfo) {
      writer.writeMessage(1, msg.pagedInfo, base.PagedInfo._writeMessage);
    }
    if (msg.records?.length) {
      writer.writeRepeatedMessage(2, msg.records as any, Page._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PagesPaged,
    reader: protoscript.BinaryReader,
  ): PagesPaged {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.pagedInfo, base.PagedInfo._readMessage);
          break;
        }
        case 2: {
          const m = Page.initialize();
          reader.readMessage(m, Page._readMessage);
          msg.records.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const PageJSON = {
  /**
   * Serializes Page to JSON.
   */
  encode: function (msg: PartialDeep<Page>): string {
    return JSON.stringify(PageJSON._writeMessage(msg));
  },

  /**
   * Deserializes Page from JSON.
   */
  decode: function (json: string): Page {
    return PageJSON._readMessage(PageJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Page with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Page>): Page {
    return {
      pageUlid: "",
      title: "",
      summary: "",
      dateCreated: "",
      dateModified: "",
      siteUlid: "",
      slug: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Page>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.pageUlid) {
      json["pageUlid"] = msg.pageUlid;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.summary) {
      json["summary"] = msg.summary;
    }
    if (msg.dateCreated) {
      json["dateCreated"] = msg.dateCreated;
    }
    if (msg.dateModified) {
      json["dateModified"] = msg.dateModified;
    }
    if (msg.siteUlid) {
      json["siteUlid"] = msg.siteUlid;
    }
    if (msg.slug) {
      json["slug"] = msg.slug;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Page, json: any): Page {
    const _pageUlid_ = json["pageUlid"] ?? json["page_ulid"];
    if (_pageUlid_) {
      msg.pageUlid = _pageUlid_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _summary_ = json["summary"];
    if (_summary_) {
      msg.summary = _summary_;
    }
    const _dateCreated_ = json["dateCreated"] ?? json["date_created"];
    if (_dateCreated_) {
      msg.dateCreated = _dateCreated_;
    }
    const _dateModified_ = json["dateModified"] ?? json["date_modified"];
    if (_dateModified_) {
      msg.dateModified = _dateModified_;
    }
    const _siteUlid_ = json["siteUlid"] ?? json["site_ulid"];
    if (_siteUlid_) {
      msg.siteUlid = _siteUlid_;
    }
    const _slug_ = json["slug"];
    if (_slug_) {
      msg.slug = _slug_;
    }
    return msg;
  },
};

export const PageWithBlockWithImageJSON = {
  /**
   * Serializes PageWithBlockWithImage to JSON.
   */
  encode: function (msg: PartialDeep<PageWithBlockWithImage>): string {
    return JSON.stringify(PageWithBlockWithImageJSON._writeMessage(msg));
  },

  /**
   * Deserializes PageWithBlockWithImage from JSON.
   */
  decode: function (json: string): PageWithBlockWithImage {
    return PageWithBlockWithImageJSON._readMessage(
      PageWithBlockWithImageJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PageWithBlockWithImage with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<PageWithBlockWithImage>,
  ): PageWithBlockWithImage {
    return {
      pageUlid: "",
      title: "",
      summary: "",
      dateCreated: "",
      dateModified: "",
      siteUlid: "",
      slug: "",
      mainNav: [],
      blocks: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PageWithBlockWithImage>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.pageUlid) {
      json["pageUlid"] = msg.pageUlid;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.summary) {
      json["summary"] = msg.summary;
    }
    if (msg.dateCreated) {
      json["dateCreated"] = msg.dateCreated;
    }
    if (msg.dateModified) {
      json["dateModified"] = msg.dateModified;
    }
    if (msg.siteUlid) {
      json["siteUlid"] = msg.siteUlid;
    }
    if (msg.slug) {
      json["slug"] = msg.slug;
    }
    if (msg.mainNav?.length) {
      json["mainNav"] = msg.mainNav.map(NavLinkJSON._writeMessage);
    }
    if (msg.blocks?.length) {
      json["blocks"] = msg.blocks.map(block.BlockWithImageJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PageWithBlockWithImage,
    json: any,
  ): PageWithBlockWithImage {
    const _pageUlid_ = json["pageUlid"] ?? json["page_ulid"];
    if (_pageUlid_) {
      msg.pageUlid = _pageUlid_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _summary_ = json["summary"];
    if (_summary_) {
      msg.summary = _summary_;
    }
    const _dateCreated_ = json["dateCreated"] ?? json["date_created"];
    if (_dateCreated_) {
      msg.dateCreated = _dateCreated_;
    }
    const _dateModified_ = json["dateModified"] ?? json["date_modified"];
    if (_dateModified_) {
      msg.dateModified = _dateModified_;
    }
    const _siteUlid_ = json["siteUlid"] ?? json["site_ulid"];
    if (_siteUlid_) {
      msg.siteUlid = _siteUlid_;
    }
    const _slug_ = json["slug"];
    if (_slug_) {
      msg.slug = _slug_;
    }
    const _mainNav_ = json["mainNav"];
    if (_mainNav_) {
      for (const item of _mainNav_) {
        const m = NavLinkJSON.initialize();
        NavLinkJSON._readMessage(m, item);
        msg.mainNav.push(m);
      }
    }
    const _blocks_ = json["blocks"];
    if (_blocks_) {
      for (const item of _blocks_) {
        const m = block.BlockWithImageJSON.initialize();
        block.BlockWithImageJSON._readMessage(m, item);
        msg.blocks.push(m);
      }
    }
    return msg;
  },
};

export const PagesJSON = {
  /**
   * Serializes Pages to JSON.
   */
  encode: function (msg: PartialDeep<Pages>): string {
    return JSON.stringify(PagesJSON._writeMessage(msg));
  },

  /**
   * Deserializes Pages from JSON.
   */
  decode: function (json: string): Pages {
    return PagesJSON._readMessage(PagesJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Pages with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Pages>): Pages {
    return {
      pages: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Pages>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.pages?.length) {
      json["pages"] = msg.pages.map(PageJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Pages, json: any): Pages {
    const _pages_ = json["pages"];
    if (_pages_) {
      for (const item of _pages_) {
        const m = PageJSON.initialize();
        PageJSON._readMessage(m, item);
        msg.pages.push(m);
      }
    }
    return msg;
  },
};

export const NavLinkJSON = {
  /**
   * Serializes NavLink to JSON.
   */
  encode: function (msg: PartialDeep<NavLink>): string {
    return JSON.stringify(NavLinkJSON._writeMessage(msg));
  },

  /**
   * Deserializes NavLink from JSON.
   */
  decode: function (json: string): NavLink {
    return NavLinkJSON._readMessage(NavLinkJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes NavLink with all fields set to their default value.
   */
  initialize: function (msg?: Partial<NavLink>): NavLink {
    return {
      slug: "",
      title: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<NavLink>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.slug) {
      json["slug"] = msg.slug;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: NavLink, json: any): NavLink {
    const _slug_ = json["slug"];
    if (_slug_) {
      msg.slug = _slug_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    return msg;
  },
};

export const PagesPagedJSON = {
  /**
   * Serializes PagesPaged to JSON.
   */
  encode: function (msg: PartialDeep<PagesPaged>): string {
    return JSON.stringify(PagesPagedJSON._writeMessage(msg));
  },

  /**
   * Deserializes PagesPaged from JSON.
   */
  decode: function (json: string): PagesPaged {
    return PagesPagedJSON._readMessage(
      PagesPagedJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PagesPaged with all fields set to their default value.
   */
  initialize: function (msg?: Partial<PagesPaged>): PagesPaged {
    return {
      pagedInfo: base.PagedInfoJSON.initialize(),
      records: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PagesPaged>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.pagedInfo) {
      const _pagedInfo_ = base.PagedInfoJSON._writeMessage(msg.pagedInfo);
      if (Object.keys(_pagedInfo_).length > 0) {
        json["pagedInfo"] = _pagedInfo_;
      }
    }
    if (msg.records?.length) {
      json["records"] = msg.records.map(PageJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: PagesPaged, json: any): PagesPaged {
    const _pagedInfo_ = json["pagedInfo"];
    if (_pagedInfo_) {
      base.PagedInfoJSON._readMessage(msg.pagedInfo, _pagedInfo_);
    }
    const _records_ = json["records"];
    if (_records_) {
      for (const item of _records_) {
        const m = PageJSON.initialize();
        PageJSON._readMessage(m, item);
        msg.records.push(m);
      }
    }
    return msg;
  },
};
