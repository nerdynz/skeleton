// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: block.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as image from "./image.pb";
import * as base from "./base.pb";

//========================================//
//                 Types                  //
//========================================//

export interface Block {
  blockUlid: string;
  title: string;
  kind: string;
  contentOneHtml: string;
  contentTwoHtml: string;
  contentThreeHtml: string;
  contentFourHtml: string;
  imageOneUlid: string;
  imageTwoUlid: string;
  imageThreeUlid: string;
  imageFourUlid: string;
  dateCreated: string;
  dateModified: string;
  pageUlid: string;
  siteUlid: string;
  sortPosition: number;
}

export interface BlockWithImage {
  blockUlid: string;
  title: string;
  kind: string;
  contentOneHtml: string;
  contentTwoHtml: string;
  contentThreeHtml: string;
  contentFourHtml: string;
  imageOne: image.Image;
  imageTwo: image.Image;
  imageThree: image.Image;
  imageFour: image.Image;
  dateCreated: string;
  dateModified: string;
  pageUlid: string;
  siteUlid: string;
  sortPosition: number;
}

export interface Blocks {
  blocks: Block[];
}

export interface BlocksWithImages {
  blocks: BlockWithImage[];
}

export interface BlocksPaged {
  pagedInfo: base.PagedInfo;
  records: Block[];
}

//========================================//
//        BlockRPC Protobuf Client        //
//========================================//

export async function LoadBlock(
  lookup: base.Lookup,
  config?: ClientConfiguration,
): Promise<Block> {
  const response = await PBrequest(
    "/skeleton.BlockRPC/LoadBlock",
    base.Lookup.encode(lookup),
    config,
  );
  return Block.decode(response);
}

export async function SaveBlock(
  block: Block,
  config?: ClientConfiguration,
): Promise<Block> {
  const response = await PBrequest(
    "/skeleton.BlockRPC/SaveBlock",
    Block.encode(block),
    config,
  );
  return Block.decode(response);
}

export async function PagedBlocks(
  pagedInfo: base.PagedInfo,
  config?: ClientConfiguration,
): Promise<BlocksPaged> {
  const response = await PBrequest(
    "/skeleton.BlockRPC/PagedBlocks",
    base.PagedInfo.encode(pagedInfo),
    config,
  );
  return BlocksPaged.decode(response);
}

export async function DeleteBlock(
  lookup: base.Lookup,
  config?: ClientConfiguration,
): Promise<base.Deleted> {
  const response = await PBrequest(
    "/skeleton.BlockRPC/DeleteBlock",
    base.Lookup.encode(lookup),
    config,
  );
  return base.Deleted.decode(response);
}

//========================================//
//          BlockRPC JSON Client          //
//========================================//

export async function LoadBlockJSON(
  lookup: base.Lookup,
  config?: ClientConfiguration,
): Promise<Block> {
  const response = await JSONrequest(
    "/skeleton.BlockRPC/LoadBlock",
    base.LookupJSON.encode(lookup),
    config,
  );
  return BlockJSON.decode(response);
}

export async function SaveBlockJSON(
  block: Block,
  config?: ClientConfiguration,
): Promise<Block> {
  const response = await JSONrequest(
    "/skeleton.BlockRPC/SaveBlock",
    BlockJSON.encode(block),
    config,
  );
  return BlockJSON.decode(response);
}

export async function PagedBlocksJSON(
  pagedInfo: base.PagedInfo,
  config?: ClientConfiguration,
): Promise<BlocksPaged> {
  const response = await JSONrequest(
    "/skeleton.BlockRPC/PagedBlocks",
    base.PagedInfoJSON.encode(pagedInfo),
    config,
  );
  return BlocksPagedJSON.decode(response);
}

export async function DeleteBlockJSON(
  lookup: base.Lookup,
  config?: ClientConfiguration,
): Promise<base.Deleted> {
  const response = await JSONrequest(
    "/skeleton.BlockRPC/DeleteBlock",
    base.LookupJSON.encode(lookup),
    config,
  );
  return base.DeletedJSON.decode(response);
}

//========================================//
//                BlockRPC                //
//========================================//

export interface BlockRPC<Context = unknown> {
  LoadBlock: (lookup: base.Lookup, context: Context) => Promise<Block> | Block;
  SaveBlock: (block: Block, context: Context) => Promise<Block> | Block;
  PagedBlocks: (
    pagedInfo: base.PagedInfo,
    context: Context,
  ) => Promise<BlocksPaged> | BlocksPaged;
  DeleteBlock: (
    lookup: base.Lookup,
    context: Context,
  ) => Promise<base.Deleted> | base.Deleted;
}

export function createBlockRPC<Context>(service: BlockRPC<Context>) {
  return {
    name: "skeleton.BlockRPC",
    methods: {
      LoadBlock: {
        name: "LoadBlock",
        handler: service.LoadBlock,
        input: { protobuf: base.Lookup, json: base.LookupJSON },
        output: { protobuf: Block, json: BlockJSON },
      },
      SaveBlock: {
        name: "SaveBlock",
        handler: service.SaveBlock,
        input: { protobuf: Block, json: BlockJSON },
        output: { protobuf: Block, json: BlockJSON },
      },
      PagedBlocks: {
        name: "PagedBlocks",
        handler: service.PagedBlocks,
        input: { protobuf: base.PagedInfo, json: base.PagedInfoJSON },
        output: { protobuf: BlocksPaged, json: BlocksPagedJSON },
      },
      DeleteBlock: {
        name: "DeleteBlock",
        handler: service.DeleteBlock,
        input: { protobuf: base.Lookup, json: base.LookupJSON },
        output: { protobuf: base.Deleted, json: base.DeletedJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Block = {
  /**
   * Serializes Block to protobuf.
   */
  encode: function (msg: PartialDeep<Block>): Uint8Array {
    return Block._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Block from protobuf.
   */
  decode: function (bytes: ByteSource): Block {
    return Block._readMessage(
      Block.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Block with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Block>): Block {
    return {
      blockUlid: "",
      title: "",
      kind: "",
      contentOneHtml: "",
      contentTwoHtml: "",
      contentThreeHtml: "",
      contentFourHtml: "",
      imageOneUlid: "",
      imageTwoUlid: "",
      imageThreeUlid: "",
      imageFourUlid: "",
      dateCreated: "",
      dateModified: "",
      pageUlid: "",
      siteUlid: "",
      sortPosition: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Block>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.blockUlid) {
      writer.writeString(1, msg.blockUlid);
    }
    if (msg.title) {
      writer.writeString(2, msg.title);
    }
    if (msg.kind) {
      writer.writeString(3, msg.kind);
    }
    if (msg.contentOneHtml) {
      writer.writeString(4, msg.contentOneHtml);
    }
    if (msg.contentTwoHtml) {
      writer.writeString(5, msg.contentTwoHtml);
    }
    if (msg.contentThreeHtml) {
      writer.writeString(6, msg.contentThreeHtml);
    }
    if (msg.contentFourHtml) {
      writer.writeString(7, msg.contentFourHtml);
    }
    if (msg.imageOneUlid) {
      writer.writeString(8, msg.imageOneUlid);
    }
    if (msg.imageTwoUlid) {
      writer.writeString(10, msg.imageTwoUlid);
    }
    if (msg.imageThreeUlid) {
      writer.writeString(12, msg.imageThreeUlid);
    }
    if (msg.imageFourUlid) {
      writer.writeString(14, msg.imageFourUlid);
    }
    if (msg.dateCreated) {
      writer.writeString(16, msg.dateCreated);
    }
    if (msg.dateModified) {
      writer.writeString(17, msg.dateModified);
    }
    if (msg.pageUlid) {
      writer.writeString(18, msg.pageUlid);
    }
    if (msg.siteUlid) {
      writer.writeString(19, msg.siteUlid);
    }
    if (msg.sortPosition) {
      writer.writeInt32(20, msg.sortPosition);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Block, reader: protoscript.BinaryReader): Block {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.blockUlid = reader.readString();
          break;
        }
        case 2: {
          msg.title = reader.readString();
          break;
        }
        case 3: {
          msg.kind = reader.readString();
          break;
        }
        case 4: {
          msg.contentOneHtml = reader.readString();
          break;
        }
        case 5: {
          msg.contentTwoHtml = reader.readString();
          break;
        }
        case 6: {
          msg.contentThreeHtml = reader.readString();
          break;
        }
        case 7: {
          msg.contentFourHtml = reader.readString();
          break;
        }
        case 8: {
          msg.imageOneUlid = reader.readString();
          break;
        }
        case 10: {
          msg.imageTwoUlid = reader.readString();
          break;
        }
        case 12: {
          msg.imageThreeUlid = reader.readString();
          break;
        }
        case 14: {
          msg.imageFourUlid = reader.readString();
          break;
        }
        case 16: {
          msg.dateCreated = reader.readString();
          break;
        }
        case 17: {
          msg.dateModified = reader.readString();
          break;
        }
        case 18: {
          msg.pageUlid = reader.readString();
          break;
        }
        case 19: {
          msg.siteUlid = reader.readString();
          break;
        }
        case 20: {
          msg.sortPosition = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const BlockWithImage = {
  /**
   * Serializes BlockWithImage to protobuf.
   */
  encode: function (msg: PartialDeep<BlockWithImage>): Uint8Array {
    return BlockWithImage._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes BlockWithImage from protobuf.
   */
  decode: function (bytes: ByteSource): BlockWithImage {
    return BlockWithImage._readMessage(
      BlockWithImage.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes BlockWithImage with all fields set to their default value.
   */
  initialize: function (msg?: Partial<BlockWithImage>): BlockWithImage {
    return {
      blockUlid: "",
      title: "",
      kind: "",
      contentOneHtml: "",
      contentTwoHtml: "",
      contentThreeHtml: "",
      contentFourHtml: "",
      imageOne: image.Image.initialize(),
      imageTwo: image.Image.initialize(),
      imageThree: image.Image.initialize(),
      imageFour: image.Image.initialize(),
      dateCreated: "",
      dateModified: "",
      pageUlid: "",
      siteUlid: "",
      sortPosition: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<BlockWithImage>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.blockUlid) {
      writer.writeString(1, msg.blockUlid);
    }
    if (msg.title) {
      writer.writeString(2, msg.title);
    }
    if (msg.kind) {
      writer.writeString(3, msg.kind);
    }
    if (msg.contentOneHtml) {
      writer.writeString(4, msg.contentOneHtml);
    }
    if (msg.contentTwoHtml) {
      writer.writeString(5, msg.contentTwoHtml);
    }
    if (msg.contentThreeHtml) {
      writer.writeString(6, msg.contentThreeHtml);
    }
    if (msg.contentFourHtml) {
      writer.writeString(7, msg.contentFourHtml);
    }
    if (msg.imageOne) {
      writer.writeMessage(9, msg.imageOne, image.Image._writeMessage);
    }
    if (msg.imageTwo) {
      writer.writeMessage(11, msg.imageTwo, image.Image._writeMessage);
    }
    if (msg.imageThree) {
      writer.writeMessage(13, msg.imageThree, image.Image._writeMessage);
    }
    if (msg.imageFour) {
      writer.writeMessage(15, msg.imageFour, image.Image._writeMessage);
    }
    if (msg.dateCreated) {
      writer.writeString(16, msg.dateCreated);
    }
    if (msg.dateModified) {
      writer.writeString(17, msg.dateModified);
    }
    if (msg.pageUlid) {
      writer.writeString(18, msg.pageUlid);
    }
    if (msg.siteUlid) {
      writer.writeString(19, msg.siteUlid);
    }
    if (msg.sortPosition) {
      writer.writeInt32(20, msg.sortPosition);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: BlockWithImage,
    reader: protoscript.BinaryReader,
  ): BlockWithImage {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.blockUlid = reader.readString();
          break;
        }
        case 2: {
          msg.title = reader.readString();
          break;
        }
        case 3: {
          msg.kind = reader.readString();
          break;
        }
        case 4: {
          msg.contentOneHtml = reader.readString();
          break;
        }
        case 5: {
          msg.contentTwoHtml = reader.readString();
          break;
        }
        case 6: {
          msg.contentThreeHtml = reader.readString();
          break;
        }
        case 7: {
          msg.contentFourHtml = reader.readString();
          break;
        }
        case 9: {
          reader.readMessage(msg.imageOne, image.Image._readMessage);
          break;
        }
        case 11: {
          reader.readMessage(msg.imageTwo, image.Image._readMessage);
          break;
        }
        case 13: {
          reader.readMessage(msg.imageThree, image.Image._readMessage);
          break;
        }
        case 15: {
          reader.readMessage(msg.imageFour, image.Image._readMessage);
          break;
        }
        case 16: {
          msg.dateCreated = reader.readString();
          break;
        }
        case 17: {
          msg.dateModified = reader.readString();
          break;
        }
        case 18: {
          msg.pageUlid = reader.readString();
          break;
        }
        case 19: {
          msg.siteUlid = reader.readString();
          break;
        }
        case 20: {
          msg.sortPosition = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Blocks = {
  /**
   * Serializes Blocks to protobuf.
   */
  encode: function (msg: PartialDeep<Blocks>): Uint8Array {
    return Blocks._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Blocks from protobuf.
   */
  decode: function (bytes: ByteSource): Blocks {
    return Blocks._readMessage(
      Blocks.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Blocks with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Blocks>): Blocks {
    return {
      blocks: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Blocks>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.blocks?.length) {
      writer.writeRepeatedMessage(1, msg.blocks as any, Block._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Blocks,
    reader: protoscript.BinaryReader,
  ): Blocks {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Block.initialize();
          reader.readMessage(m, Block._readMessage);
          msg.blocks.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const BlocksWithImages = {
  /**
   * Serializes BlocksWithImages to protobuf.
   */
  encode: function (msg: PartialDeep<BlocksWithImages>): Uint8Array {
    return BlocksWithImages._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes BlocksWithImages from protobuf.
   */
  decode: function (bytes: ByteSource): BlocksWithImages {
    return BlocksWithImages._readMessage(
      BlocksWithImages.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes BlocksWithImages with all fields set to their default value.
   */
  initialize: function (msg?: Partial<BlocksWithImages>): BlocksWithImages {
    return {
      blocks: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<BlocksWithImages>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.blocks?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.blocks as any,
        BlockWithImage._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: BlocksWithImages,
    reader: protoscript.BinaryReader,
  ): BlocksWithImages {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = BlockWithImage.initialize();
          reader.readMessage(m, BlockWithImage._readMessage);
          msg.blocks.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const BlocksPaged = {
  /**
   * Serializes BlocksPaged to protobuf.
   */
  encode: function (msg: PartialDeep<BlocksPaged>): Uint8Array {
    return BlocksPaged._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes BlocksPaged from protobuf.
   */
  decode: function (bytes: ByteSource): BlocksPaged {
    return BlocksPaged._readMessage(
      BlocksPaged.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes BlocksPaged with all fields set to their default value.
   */
  initialize: function (msg?: Partial<BlocksPaged>): BlocksPaged {
    return {
      pagedInfo: base.PagedInfo.initialize(),
      records: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<BlocksPaged>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.pagedInfo) {
      writer.writeMessage(1, msg.pagedInfo, base.PagedInfo._writeMessage);
    }
    if (msg.records?.length) {
      writer.writeRepeatedMessage(2, msg.records as any, Block._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: BlocksPaged,
    reader: protoscript.BinaryReader,
  ): BlocksPaged {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.pagedInfo, base.PagedInfo._readMessage);
          break;
        }
        case 2: {
          const m = Block.initialize();
          reader.readMessage(m, Block._readMessage);
          msg.records.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const BlockJSON = {
  /**
   * Serializes Block to JSON.
   */
  encode: function (msg: PartialDeep<Block>): string {
    return JSON.stringify(BlockJSON._writeMessage(msg));
  },

  /**
   * Deserializes Block from JSON.
   */
  decode: function (json: string): Block {
    return BlockJSON._readMessage(BlockJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Block with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Block>): Block {
    return {
      blockUlid: "",
      title: "",
      kind: "",
      contentOneHtml: "",
      contentTwoHtml: "",
      contentThreeHtml: "",
      contentFourHtml: "",
      imageOneUlid: "",
      imageTwoUlid: "",
      imageThreeUlid: "",
      imageFourUlid: "",
      dateCreated: "",
      dateModified: "",
      pageUlid: "",
      siteUlid: "",
      sortPosition: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Block>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.blockUlid) {
      json["blockUlid"] = msg.blockUlid;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.kind) {
      json["kind"] = msg.kind;
    }
    if (msg.contentOneHtml) {
      json["contentOneHtml"] = msg.contentOneHtml;
    }
    if (msg.contentTwoHtml) {
      json["contentTwoHtml"] = msg.contentTwoHtml;
    }
    if (msg.contentThreeHtml) {
      json["contentThreeHtml"] = msg.contentThreeHtml;
    }
    if (msg.contentFourHtml) {
      json["contentFourHtml"] = msg.contentFourHtml;
    }
    if (msg.imageOneUlid) {
      json["imageOneUlid"] = msg.imageOneUlid;
    }
    if (msg.imageTwoUlid) {
      json["imageTwoUlid"] = msg.imageTwoUlid;
    }
    if (msg.imageThreeUlid) {
      json["imageThreeUlid"] = msg.imageThreeUlid;
    }
    if (msg.imageFourUlid) {
      json["imageFourUlid"] = msg.imageFourUlid;
    }
    if (msg.dateCreated) {
      json["dateCreated"] = msg.dateCreated;
    }
    if (msg.dateModified) {
      json["dateModified"] = msg.dateModified;
    }
    if (msg.pageUlid) {
      json["pageUlid"] = msg.pageUlid;
    }
    if (msg.siteUlid) {
      json["siteUlid"] = msg.siteUlid;
    }
    if (msg.sortPosition) {
      json["sortPosition"] = msg.sortPosition;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Block, json: any): Block {
    const _blockUlid_ = json["blockUlid"] ?? json["block_ulid"];
    if (_blockUlid_) {
      msg.blockUlid = _blockUlid_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _kind_ = json["kind"];
    if (_kind_) {
      msg.kind = _kind_;
    }
    const _contentOneHtml_ = json["contentOneHtml"] ?? json["content_one_html"];
    if (_contentOneHtml_) {
      msg.contentOneHtml = _contentOneHtml_;
    }
    const _contentTwoHtml_ = json["contentTwoHtml"] ?? json["content_two_html"];
    if (_contentTwoHtml_) {
      msg.contentTwoHtml = _contentTwoHtml_;
    }
    const _contentThreeHtml_ =
      json["contentThreeHtml"] ?? json["content_three_html"];
    if (_contentThreeHtml_) {
      msg.contentThreeHtml = _contentThreeHtml_;
    }
    const _contentFourHtml_ =
      json["contentFourHtml"] ?? json["content_four_html"];
    if (_contentFourHtml_) {
      msg.contentFourHtml = _contentFourHtml_;
    }
    const _imageOneUlid_ = json["imageOneUlid"] ?? json["image_one_ulid"];
    if (_imageOneUlid_) {
      msg.imageOneUlid = _imageOneUlid_;
    }
    const _imageTwoUlid_ = json["imageTwoUlid"] ?? json["image_two_ulid"];
    if (_imageTwoUlid_) {
      msg.imageTwoUlid = _imageTwoUlid_;
    }
    const _imageThreeUlid_ = json["imageThreeUlid"] ?? json["image_three_ulid"];
    if (_imageThreeUlid_) {
      msg.imageThreeUlid = _imageThreeUlid_;
    }
    const _imageFourUlid_ = json["imageFourUlid"] ?? json["image_four_ulid"];
    if (_imageFourUlid_) {
      msg.imageFourUlid = _imageFourUlid_;
    }
    const _dateCreated_ = json["dateCreated"] ?? json["date_created"];
    if (_dateCreated_) {
      msg.dateCreated = _dateCreated_;
    }
    const _dateModified_ = json["dateModified"] ?? json["date_modified"];
    if (_dateModified_) {
      msg.dateModified = _dateModified_;
    }
    const _pageUlid_ = json["pageUlid"] ?? json["page_ulid"];
    if (_pageUlid_) {
      msg.pageUlid = _pageUlid_;
    }
    const _siteUlid_ = json["siteUlid"] ?? json["site_ulid"];
    if (_siteUlid_) {
      msg.siteUlid = _siteUlid_;
    }
    const _sortPosition_ = json["sortPosition"] ?? json["sort_position"];
    if (_sortPosition_) {
      msg.sortPosition = protoscript.parseNumber(_sortPosition_);
    }
    return msg;
  },
};

export const BlockWithImageJSON = {
  /**
   * Serializes BlockWithImage to JSON.
   */
  encode: function (msg: PartialDeep<BlockWithImage>): string {
    return JSON.stringify(BlockWithImageJSON._writeMessage(msg));
  },

  /**
   * Deserializes BlockWithImage from JSON.
   */
  decode: function (json: string): BlockWithImage {
    return BlockWithImageJSON._readMessage(
      BlockWithImageJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes BlockWithImage with all fields set to their default value.
   */
  initialize: function (msg?: Partial<BlockWithImage>): BlockWithImage {
    return {
      blockUlid: "",
      title: "",
      kind: "",
      contentOneHtml: "",
      contentTwoHtml: "",
      contentThreeHtml: "",
      contentFourHtml: "",
      imageOne: image.ImageJSON.initialize(),
      imageTwo: image.ImageJSON.initialize(),
      imageThree: image.ImageJSON.initialize(),
      imageFour: image.ImageJSON.initialize(),
      dateCreated: "",
      dateModified: "",
      pageUlid: "",
      siteUlid: "",
      sortPosition: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<BlockWithImage>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.blockUlid) {
      json["blockUlid"] = msg.blockUlid;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.kind) {
      json["kind"] = msg.kind;
    }
    if (msg.contentOneHtml) {
      json["contentOneHtml"] = msg.contentOneHtml;
    }
    if (msg.contentTwoHtml) {
      json["contentTwoHtml"] = msg.contentTwoHtml;
    }
    if (msg.contentThreeHtml) {
      json["contentThreeHtml"] = msg.contentThreeHtml;
    }
    if (msg.contentFourHtml) {
      json["contentFourHtml"] = msg.contentFourHtml;
    }
    if (msg.imageOne) {
      const _imageOne_ = image.ImageJSON._writeMessage(msg.imageOne);
      if (Object.keys(_imageOne_).length > 0) {
        json["imageOne"] = _imageOne_;
      }
    }
    if (msg.imageTwo) {
      const _imageTwo_ = image.ImageJSON._writeMessage(msg.imageTwo);
      if (Object.keys(_imageTwo_).length > 0) {
        json["imageTwo"] = _imageTwo_;
      }
    }
    if (msg.imageThree) {
      const _imageThree_ = image.ImageJSON._writeMessage(msg.imageThree);
      if (Object.keys(_imageThree_).length > 0) {
        json["imageThree"] = _imageThree_;
      }
    }
    if (msg.imageFour) {
      const _imageFour_ = image.ImageJSON._writeMessage(msg.imageFour);
      if (Object.keys(_imageFour_).length > 0) {
        json["imageFour"] = _imageFour_;
      }
    }
    if (msg.dateCreated) {
      json["dateCreated"] = msg.dateCreated;
    }
    if (msg.dateModified) {
      json["dateModified"] = msg.dateModified;
    }
    if (msg.pageUlid) {
      json["pageUlid"] = msg.pageUlid;
    }
    if (msg.siteUlid) {
      json["siteUlid"] = msg.siteUlid;
    }
    if (msg.sortPosition) {
      json["sortPosition"] = msg.sortPosition;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: BlockWithImage, json: any): BlockWithImage {
    const _blockUlid_ = json["blockUlid"] ?? json["block_ulid"];
    if (_blockUlid_) {
      msg.blockUlid = _blockUlid_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _kind_ = json["kind"];
    if (_kind_) {
      msg.kind = _kind_;
    }
    const _contentOneHtml_ = json["contentOneHtml"] ?? json["content_one_html"];
    if (_contentOneHtml_) {
      msg.contentOneHtml = _contentOneHtml_;
    }
    const _contentTwoHtml_ = json["contentTwoHtml"] ?? json["content_two_html"];
    if (_contentTwoHtml_) {
      msg.contentTwoHtml = _contentTwoHtml_;
    }
    const _contentThreeHtml_ =
      json["contentThreeHtml"] ?? json["content_three_html"];
    if (_contentThreeHtml_) {
      msg.contentThreeHtml = _contentThreeHtml_;
    }
    const _contentFourHtml_ =
      json["contentFourHtml"] ?? json["content_four_html"];
    if (_contentFourHtml_) {
      msg.contentFourHtml = _contentFourHtml_;
    }
    const _imageOne_ = json["imageOne"] ?? json["image_one"];
    if (_imageOne_) {
      image.ImageJSON._readMessage(msg.imageOne, _imageOne_);
    }
    const _imageTwo_ = json["imageTwo"] ?? json["image_two"];
    if (_imageTwo_) {
      image.ImageJSON._readMessage(msg.imageTwo, _imageTwo_);
    }
    const _imageThree_ = json["imageThree"] ?? json["image_three"];
    if (_imageThree_) {
      image.ImageJSON._readMessage(msg.imageThree, _imageThree_);
    }
    const _imageFour_ = json["imageFour"] ?? json["image_four"];
    if (_imageFour_) {
      image.ImageJSON._readMessage(msg.imageFour, _imageFour_);
    }
    const _dateCreated_ = json["dateCreated"] ?? json["date_created"];
    if (_dateCreated_) {
      msg.dateCreated = _dateCreated_;
    }
    const _dateModified_ = json["dateModified"] ?? json["date_modified"];
    if (_dateModified_) {
      msg.dateModified = _dateModified_;
    }
    const _pageUlid_ = json["pageUlid"] ?? json["page_ulid"];
    if (_pageUlid_) {
      msg.pageUlid = _pageUlid_;
    }
    const _siteUlid_ = json["siteUlid"] ?? json["site_ulid"];
    if (_siteUlid_) {
      msg.siteUlid = _siteUlid_;
    }
    const _sortPosition_ = json["sortPosition"] ?? json["sort_position"];
    if (_sortPosition_) {
      msg.sortPosition = protoscript.parseNumber(_sortPosition_);
    }
    return msg;
  },
};

export const BlocksJSON = {
  /**
   * Serializes Blocks to JSON.
   */
  encode: function (msg: PartialDeep<Blocks>): string {
    return JSON.stringify(BlocksJSON._writeMessage(msg));
  },

  /**
   * Deserializes Blocks from JSON.
   */
  decode: function (json: string): Blocks {
    return BlocksJSON._readMessage(BlocksJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Blocks with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Blocks>): Blocks {
    return {
      blocks: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Blocks>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.blocks?.length) {
      json["blocks"] = msg.blocks.map(BlockJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Blocks, json: any): Blocks {
    const _blocks_ = json["blocks"];
    if (_blocks_) {
      for (const item of _blocks_) {
        const m = BlockJSON.initialize();
        BlockJSON._readMessage(m, item);
        msg.blocks.push(m);
      }
    }
    return msg;
  },
};

export const BlocksWithImagesJSON = {
  /**
   * Serializes BlocksWithImages to JSON.
   */
  encode: function (msg: PartialDeep<BlocksWithImages>): string {
    return JSON.stringify(BlocksWithImagesJSON._writeMessage(msg));
  },

  /**
   * Deserializes BlocksWithImages from JSON.
   */
  decode: function (json: string): BlocksWithImages {
    return BlocksWithImagesJSON._readMessage(
      BlocksWithImagesJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes BlocksWithImages with all fields set to their default value.
   */
  initialize: function (msg?: Partial<BlocksWithImages>): BlocksWithImages {
    return {
      blocks: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<BlocksWithImages>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.blocks?.length) {
      json["blocks"] = msg.blocks.map(BlockWithImageJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: BlocksWithImages, json: any): BlocksWithImages {
    const _blocks_ = json["blocks"];
    if (_blocks_) {
      for (const item of _blocks_) {
        const m = BlockWithImageJSON.initialize();
        BlockWithImageJSON._readMessage(m, item);
        msg.blocks.push(m);
      }
    }
    return msg;
  },
};

export const BlocksPagedJSON = {
  /**
   * Serializes BlocksPaged to JSON.
   */
  encode: function (msg: PartialDeep<BlocksPaged>): string {
    return JSON.stringify(BlocksPagedJSON._writeMessage(msg));
  },

  /**
   * Deserializes BlocksPaged from JSON.
   */
  decode: function (json: string): BlocksPaged {
    return BlocksPagedJSON._readMessage(
      BlocksPagedJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes BlocksPaged with all fields set to their default value.
   */
  initialize: function (msg?: Partial<BlocksPaged>): BlocksPaged {
    return {
      pagedInfo: base.PagedInfoJSON.initialize(),
      records: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<BlocksPaged>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.pagedInfo) {
      const _pagedInfo_ = base.PagedInfoJSON._writeMessage(msg.pagedInfo);
      if (Object.keys(_pagedInfo_).length > 0) {
        json["pagedInfo"] = _pagedInfo_;
      }
    }
    if (msg.records?.length) {
      json["records"] = msg.records.map(BlockJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: BlocksPaged, json: any): BlocksPaged {
    const _pagedInfo_ = json["pagedInfo"];
    if (_pagedInfo_) {
      base.PagedInfoJSON._readMessage(msg.pagedInfo, _pagedInfo_);
    }
    const _records_ = json["records"];
    if (_records_) {
      for (const item of _records_) {
        const m = BlockJSON.initialize();
        BlockJSON._readMessage(m, item);
        msg.records.push(m);
      }
    }
    return msg;
  },
};
