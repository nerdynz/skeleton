// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: access.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface SitesQuery {
  email: string;
}

export interface UnauthorisedUser {
  email: string;
  password: string;
  siteUlid: string;
}

export interface SessionInfo {
  user: SessionUser;
  token: string;
  expiration: number;
  sites: Site[];
}

export interface SessionUser {
  username: string;
  name: string;
  email: string;
  password: string;
  role: string;
  picture: string;
  initials: string;
  ulid: string;
  siteUlid: string;
}

export interface Site {
  name: string;
  siteUlid: string;
}

export interface Sites {
  sites: Site[];
}

export interface InvalidateUser {
  email: string;
  siteUlid: string;
}

export interface InvalidateSuccess {
  isSuccess: boolean;
}

//========================================//
//         Access Protobuf Client         //
//========================================//

export async function Login(
  unauthorisedUser: UnauthorisedUser,
  config?: ClientConfiguration,
): Promise<SessionInfo> {
  const response = await PBrequest(
    "/cliq.Access/Login",
    UnauthorisedUser.encode(unauthorisedUser),
    config,
  );
  return SessionInfo.decode(response);
}

export async function ValidSites(
  sitesQuery: SitesQuery,
  config?: ClientConfiguration,
): Promise<Sites> {
  const response = await PBrequest(
    "/cliq.Access/ValidSites",
    SitesQuery.encode(sitesQuery),
    config,
  );
  return Sites.decode(response);
}

export async function Logout(
  invalidateUser: InvalidateUser,
  config?: ClientConfiguration,
): Promise<InvalidateSuccess> {
  const response = await PBrequest(
    "/cliq.Access/Logout",
    InvalidateUser.encode(invalidateUser),
    config,
  );
  return InvalidateSuccess.decode(response);
}

//========================================//
//           Access JSON Client           //
//========================================//

export async function LoginJSON(
  unauthorisedUser: UnauthorisedUser,
  config?: ClientConfiguration,
): Promise<SessionInfo> {
  const response = await JSONrequest(
    "/cliq.Access/Login",
    UnauthorisedUserJSON.encode(unauthorisedUser),
    config,
  );
  return SessionInfoJSON.decode(response);
}

export async function ValidSitesJSON(
  sitesQuery: SitesQuery,
  config?: ClientConfiguration,
): Promise<Sites> {
  const response = await JSONrequest(
    "/cliq.Access/ValidSites",
    SitesQueryJSON.encode(sitesQuery),
    config,
  );
  return SitesJSON.decode(response);
}

export async function LogoutJSON(
  invalidateUser: InvalidateUser,
  config?: ClientConfiguration,
): Promise<InvalidateSuccess> {
  const response = await JSONrequest(
    "/cliq.Access/Logout",
    InvalidateUserJSON.encode(invalidateUser),
    config,
  );
  return InvalidateSuccessJSON.decode(response);
}

//========================================//
//                 Access                 //
//========================================//

export interface Access<Context = unknown> {
  Login: (
    unauthorisedUser: UnauthorisedUser,
    context: Context,
  ) => Promise<SessionInfo> | SessionInfo;
  ValidSites: (
    sitesQuery: SitesQuery,
    context: Context,
  ) => Promise<Sites> | Sites;
  Logout: (
    invalidateUser: InvalidateUser,
    context: Context,
  ) => Promise<InvalidateSuccess> | InvalidateSuccess;
}

export function createAccess<Context>(service: Access<Context>) {
  return {
    name: "cliq.Access",
    methods: {
      Login: {
        name: "Login",
        handler: service.Login,
        input: { protobuf: UnauthorisedUser, json: UnauthorisedUserJSON },
        output: { protobuf: SessionInfo, json: SessionInfoJSON },
      },
      ValidSites: {
        name: "ValidSites",
        handler: service.ValidSites,
        input: { protobuf: SitesQuery, json: SitesQueryJSON },
        output: { protobuf: Sites, json: SitesJSON },
      },
      Logout: {
        name: "Logout",
        handler: service.Logout,
        input: { protobuf: InvalidateUser, json: InvalidateUserJSON },
        output: { protobuf: InvalidateSuccess, json: InvalidateSuccessJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const SitesQuery = {
  /**
   * Serializes SitesQuery to protobuf.
   */
  encode: function (msg: PartialDeep<SitesQuery>): Uint8Array {
    return SitesQuery._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SitesQuery from protobuf.
   */
  decode: function (bytes: ByteSource): SitesQuery {
    return SitesQuery._readMessage(
      SitesQuery.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes SitesQuery with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SitesQuery>): SitesQuery {
    return {
      email: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SitesQuery>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SitesQuery,
    reader: protoscript.BinaryReader,
  ): SitesQuery {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UnauthorisedUser = {
  /**
   * Serializes UnauthorisedUser to protobuf.
   */
  encode: function (msg: PartialDeep<UnauthorisedUser>): Uint8Array {
    return UnauthorisedUser._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UnauthorisedUser from protobuf.
   */
  decode: function (bytes: ByteSource): UnauthorisedUser {
    return UnauthorisedUser._readMessage(
      UnauthorisedUser.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UnauthorisedUser with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UnauthorisedUser>): UnauthorisedUser {
    return {
      email: "",
      password: "",
      siteUlid: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UnauthorisedUser>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    if (msg.password) {
      writer.writeString(2, msg.password);
    }
    if (msg.siteUlid) {
      writer.writeString(3, msg.siteUlid);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UnauthorisedUser,
    reader: protoscript.BinaryReader,
  ): UnauthorisedUser {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        case 2: {
          msg.password = reader.readString();
          break;
        }
        case 3: {
          msg.siteUlid = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SessionInfo = {
  /**
   * Serializes SessionInfo to protobuf.
   */
  encode: function (msg: PartialDeep<SessionInfo>): Uint8Array {
    return SessionInfo._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SessionInfo from protobuf.
   */
  decode: function (bytes: ByteSource): SessionInfo {
    return SessionInfo._readMessage(
      SessionInfo.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes SessionInfo with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SessionInfo>): SessionInfo {
    return {
      user: SessionUser.initialize(),
      token: "",
      expiration: 0,
      sites: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SessionInfo>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.user) {
      writer.writeMessage(1, msg.user, SessionUser._writeMessage);
    }
    if (msg.token) {
      writer.writeString(2, msg.token);
    }
    if (msg.expiration) {
      writer.writeInt32(3, msg.expiration);
    }
    if (msg.sites?.length) {
      writer.writeRepeatedMessage(4, msg.sites as any, Site._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SessionInfo,
    reader: protoscript.BinaryReader,
  ): SessionInfo {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.user, SessionUser._readMessage);
          break;
        }
        case 2: {
          msg.token = reader.readString();
          break;
        }
        case 3: {
          msg.expiration = reader.readInt32();
          break;
        }
        case 4: {
          const m = Site.initialize();
          reader.readMessage(m, Site._readMessage);
          msg.sites.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SessionUser = {
  /**
   * Serializes SessionUser to protobuf.
   */
  encode: function (msg: PartialDeep<SessionUser>): Uint8Array {
    return SessionUser._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SessionUser from protobuf.
   */
  decode: function (bytes: ByteSource): SessionUser {
    return SessionUser._readMessage(
      SessionUser.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes SessionUser with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SessionUser>): SessionUser {
    return {
      username: "",
      name: "",
      email: "",
      password: "",
      role: "",
      picture: "",
      initials: "",
      ulid: "",
      siteUlid: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SessionUser>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.username) {
      writer.writeString(1, msg.username);
    }
    if (msg.name) {
      writer.writeString(2, msg.name);
    }
    if (msg.email) {
      writer.writeString(3, msg.email);
    }
    if (msg.password) {
      writer.writeString(4, msg.password);
    }
    if (msg.role) {
      writer.writeString(5, msg.role);
    }
    if (msg.picture) {
      writer.writeString(6, msg.picture);
    }
    if (msg.initials) {
      writer.writeString(7, msg.initials);
    }
    if (msg.ulid) {
      writer.writeString(8, msg.ulid);
    }
    if (msg.siteUlid) {
      writer.writeString(9, msg.siteUlid);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SessionUser,
    reader: protoscript.BinaryReader,
  ): SessionUser {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.username = reader.readString();
          break;
        }
        case 2: {
          msg.name = reader.readString();
          break;
        }
        case 3: {
          msg.email = reader.readString();
          break;
        }
        case 4: {
          msg.password = reader.readString();
          break;
        }
        case 5: {
          msg.role = reader.readString();
          break;
        }
        case 6: {
          msg.picture = reader.readString();
          break;
        }
        case 7: {
          msg.initials = reader.readString();
          break;
        }
        case 8: {
          msg.ulid = reader.readString();
          break;
        }
        case 9: {
          msg.siteUlid = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Site = {
  /**
   * Serializes Site to protobuf.
   */
  encode: function (msg: PartialDeep<Site>): Uint8Array {
    return Site._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Site from protobuf.
   */
  decode: function (bytes: ByteSource): Site {
    return Site._readMessage(
      Site.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Site with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Site>): Site {
    return {
      name: "",
      siteUlid: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Site>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.siteUlid) {
      writer.writeString(2, msg.siteUlid);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Site, reader: protoscript.BinaryReader): Site {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          msg.siteUlid = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Sites = {
  /**
   * Serializes Sites to protobuf.
   */
  encode: function (msg: PartialDeep<Sites>): Uint8Array {
    return Sites._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Sites from protobuf.
   */
  decode: function (bytes: ByteSource): Sites {
    return Sites._readMessage(
      Sites.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Sites with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Sites>): Sites {
    return {
      sites: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Sites>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.sites?.length) {
      writer.writeRepeatedMessage(1, msg.sites as any, Site._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Sites, reader: protoscript.BinaryReader): Sites {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Site.initialize();
          reader.readMessage(m, Site._readMessage);
          msg.sites.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const InvalidateUser = {
  /**
   * Serializes InvalidateUser to protobuf.
   */
  encode: function (msg: PartialDeep<InvalidateUser>): Uint8Array {
    return InvalidateUser._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes InvalidateUser from protobuf.
   */
  decode: function (bytes: ByteSource): InvalidateUser {
    return InvalidateUser._readMessage(
      InvalidateUser.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes InvalidateUser with all fields set to their default value.
   */
  initialize: function (msg?: Partial<InvalidateUser>): InvalidateUser {
    return {
      email: "",
      siteUlid: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<InvalidateUser>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    if (msg.siteUlid) {
      writer.writeString(2, msg.siteUlid);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: InvalidateUser,
    reader: protoscript.BinaryReader,
  ): InvalidateUser {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        case 2: {
          msg.siteUlid = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const InvalidateSuccess = {
  /**
   * Serializes InvalidateSuccess to protobuf.
   */
  encode: function (msg: PartialDeep<InvalidateSuccess>): Uint8Array {
    return InvalidateSuccess._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes InvalidateSuccess from protobuf.
   */
  decode: function (bytes: ByteSource): InvalidateSuccess {
    return InvalidateSuccess._readMessage(
      InvalidateSuccess.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes InvalidateSuccess with all fields set to their default value.
   */
  initialize: function (msg?: Partial<InvalidateSuccess>): InvalidateSuccess {
    return {
      isSuccess: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<InvalidateSuccess>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.isSuccess) {
      writer.writeBool(1, msg.isSuccess);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: InvalidateSuccess,
    reader: protoscript.BinaryReader,
  ): InvalidateSuccess {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.isSuccess = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const SitesQueryJSON = {
  /**
   * Serializes SitesQuery to JSON.
   */
  encode: function (msg: PartialDeep<SitesQuery>): string {
    return JSON.stringify(SitesQueryJSON._writeMessage(msg));
  },

  /**
   * Deserializes SitesQuery from JSON.
   */
  decode: function (json: string): SitesQuery {
    return SitesQueryJSON._readMessage(
      SitesQueryJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes SitesQuery with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SitesQuery>): SitesQuery {
    return {
      email: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SitesQuery>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.email) {
      json["email"] = msg.email;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: SitesQuery, json: any): SitesQuery {
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    return msg;
  },
};

export const UnauthorisedUserJSON = {
  /**
   * Serializes UnauthorisedUser to JSON.
   */
  encode: function (msg: PartialDeep<UnauthorisedUser>): string {
    return JSON.stringify(UnauthorisedUserJSON._writeMessage(msg));
  },

  /**
   * Deserializes UnauthorisedUser from JSON.
   */
  decode: function (json: string): UnauthorisedUser {
    return UnauthorisedUserJSON._readMessage(
      UnauthorisedUserJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UnauthorisedUser with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UnauthorisedUser>): UnauthorisedUser {
    return {
      email: "",
      password: "",
      siteUlid: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UnauthorisedUser>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.password) {
      json["password"] = msg.password;
    }
    if (msg.siteUlid) {
      json["siteUlid"] = msg.siteUlid;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UnauthorisedUser, json: any): UnauthorisedUser {
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _password_ = json["password"];
    if (_password_) {
      msg.password = _password_;
    }
    const _siteUlid_ = json["siteUlid"] ?? json["site_ulid"];
    if (_siteUlid_) {
      msg.siteUlid = _siteUlid_;
    }
    return msg;
  },
};

export const SessionInfoJSON = {
  /**
   * Serializes SessionInfo to JSON.
   */
  encode: function (msg: PartialDeep<SessionInfo>): string {
    return JSON.stringify(SessionInfoJSON._writeMessage(msg));
  },

  /**
   * Deserializes SessionInfo from JSON.
   */
  decode: function (json: string): SessionInfo {
    return SessionInfoJSON._readMessage(
      SessionInfoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes SessionInfo with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SessionInfo>): SessionInfo {
    return {
      user: SessionUserJSON.initialize(),
      token: "",
      expiration: 0,
      sites: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SessionInfo>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.user) {
      const _user_ = SessionUserJSON._writeMessage(msg.user);
      if (Object.keys(_user_).length > 0) {
        json["user"] = _user_;
      }
    }
    if (msg.token) {
      json["token"] = msg.token;
    }
    if (msg.expiration) {
      json["expiration"] = msg.expiration;
    }
    if (msg.sites?.length) {
      json["sites"] = msg.sites.map(SiteJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: SessionInfo, json: any): SessionInfo {
    const _user_ = json["user"];
    if (_user_) {
      SessionUserJSON._readMessage(msg.user, _user_);
    }
    const _token_ = json["token"];
    if (_token_) {
      msg.token = _token_;
    }
    const _expiration_ = json["expiration"];
    if (_expiration_) {
      msg.expiration = protoscript.parseNumber(_expiration_);
    }
    const _sites_ = json["sites"];
    if (_sites_) {
      for (const item of _sites_) {
        const m = SiteJSON.initialize();
        SiteJSON._readMessage(m, item);
        msg.sites.push(m);
      }
    }
    return msg;
  },
};

export const SessionUserJSON = {
  /**
   * Serializes SessionUser to JSON.
   */
  encode: function (msg: PartialDeep<SessionUser>): string {
    return JSON.stringify(SessionUserJSON._writeMessage(msg));
  },

  /**
   * Deserializes SessionUser from JSON.
   */
  decode: function (json: string): SessionUser {
    return SessionUserJSON._readMessage(
      SessionUserJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes SessionUser with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SessionUser>): SessionUser {
    return {
      username: "",
      name: "",
      email: "",
      password: "",
      role: "",
      picture: "",
      initials: "",
      ulid: "",
      siteUlid: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SessionUser>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.username) {
      json["username"] = msg.username;
    }
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.password) {
      json["password"] = msg.password;
    }
    if (msg.role) {
      json["role"] = msg.role;
    }
    if (msg.picture) {
      json["picture"] = msg.picture;
    }
    if (msg.initials) {
      json["initials"] = msg.initials;
    }
    if (msg.ulid) {
      json["ulid"] = msg.ulid;
    }
    if (msg.siteUlid) {
      json["siteUlid"] = msg.siteUlid;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: SessionUser, json: any): SessionUser {
    const _username_ = json["username"];
    if (_username_) {
      msg.username = _username_;
    }
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _password_ = json["password"];
    if (_password_) {
      msg.password = _password_;
    }
    const _role_ = json["role"];
    if (_role_) {
      msg.role = _role_;
    }
    const _picture_ = json["picture"];
    if (_picture_) {
      msg.picture = _picture_;
    }
    const _initials_ = json["initials"];
    if (_initials_) {
      msg.initials = _initials_;
    }
    const _ulid_ = json["ulid"];
    if (_ulid_) {
      msg.ulid = _ulid_;
    }
    const _siteUlid_ = json["siteUlid"] ?? json["site_ulid"];
    if (_siteUlid_) {
      msg.siteUlid = _siteUlid_;
    }
    return msg;
  },
};

export const SiteJSON = {
  /**
   * Serializes Site to JSON.
   */
  encode: function (msg: PartialDeep<Site>): string {
    return JSON.stringify(SiteJSON._writeMessage(msg));
  },

  /**
   * Deserializes Site from JSON.
   */
  decode: function (json: string): Site {
    return SiteJSON._readMessage(SiteJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Site with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Site>): Site {
    return {
      name: "",
      siteUlid: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Site>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.siteUlid) {
      json["siteUlid"] = msg.siteUlid;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Site, json: any): Site {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _siteUlid_ = json["siteUlid"] ?? json["site_ulid"];
    if (_siteUlid_) {
      msg.siteUlid = _siteUlid_;
    }
    return msg;
  },
};

export const SitesJSON = {
  /**
   * Serializes Sites to JSON.
   */
  encode: function (msg: PartialDeep<Sites>): string {
    return JSON.stringify(SitesJSON._writeMessage(msg));
  },

  /**
   * Deserializes Sites from JSON.
   */
  decode: function (json: string): Sites {
    return SitesJSON._readMessage(SitesJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Sites with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Sites>): Sites {
    return {
      sites: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Sites>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.sites?.length) {
      json["sites"] = msg.sites.map(SiteJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Sites, json: any): Sites {
    const _sites_ = json["sites"];
    if (_sites_) {
      for (const item of _sites_) {
        const m = SiteJSON.initialize();
        SiteJSON._readMessage(m, item);
        msg.sites.push(m);
      }
    }
    return msg;
  },
};

export const InvalidateUserJSON = {
  /**
   * Serializes InvalidateUser to JSON.
   */
  encode: function (msg: PartialDeep<InvalidateUser>): string {
    return JSON.stringify(InvalidateUserJSON._writeMessage(msg));
  },

  /**
   * Deserializes InvalidateUser from JSON.
   */
  decode: function (json: string): InvalidateUser {
    return InvalidateUserJSON._readMessage(
      InvalidateUserJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes InvalidateUser with all fields set to their default value.
   */
  initialize: function (msg?: Partial<InvalidateUser>): InvalidateUser {
    return {
      email: "",
      siteUlid: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<InvalidateUser>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.siteUlid) {
      json["siteUlid"] = msg.siteUlid;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: InvalidateUser, json: any): InvalidateUser {
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _siteUlid_ = json["siteUlid"] ?? json["site_ulid"];
    if (_siteUlid_) {
      msg.siteUlid = _siteUlid_;
    }
    return msg;
  },
};

export const InvalidateSuccessJSON = {
  /**
   * Serializes InvalidateSuccess to JSON.
   */
  encode: function (msg: PartialDeep<InvalidateSuccess>): string {
    return JSON.stringify(InvalidateSuccessJSON._writeMessage(msg));
  },

  /**
   * Deserializes InvalidateSuccess from JSON.
   */
  decode: function (json: string): InvalidateSuccess {
    return InvalidateSuccessJSON._readMessage(
      InvalidateSuccessJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes InvalidateSuccess with all fields set to their default value.
   */
  initialize: function (msg?: Partial<InvalidateSuccess>): InvalidateSuccess {
    return {
      isSuccess: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<InvalidateSuccess>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.isSuccess) {
      json["isSuccess"] = msg.isSuccess;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: InvalidateSuccess,
    json: any,
  ): InvalidateSuccess {
    const _isSuccess_ = json["isSuccess"] ?? json["is_success"];
    if (_isSuccess_) {
      msg.isSuccess = _isSuccess_;
    }
    return msg;
  },
};
