// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: person.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as base from "./base.pb";

//========================================//
//                 Types                  //
//========================================//

export interface Person {
  personUlid: string;
  siteUlid: string;
  dateCreated: string;
  dateModified: string;
  name: string;
  username: string;
  email: string;
  phone: string;
  role: string;
  initials: string;
  password: string;
}

export interface People {
  people: Person[];
}

export interface PeoplePaged {
  pagedInfo: base.PagedInfo;
  records: Person[];
}

//========================================//
//       PersonRPC Protobuf Client        //
//========================================//

export async function LoadPerson(
  lookup: base.Lookup,
  config?: ClientConfiguration,
): Promise<Person> {
  const response = await PBrequest(
    "/skeleton.PersonRPC/LoadPerson",
    base.Lookup.encode(lookup),
    config,
  );
  return Person.decode(response);
}

export async function SavePerson(
  person: Person,
  config?: ClientConfiguration,
): Promise<Person> {
  const response = await PBrequest(
    "/skeleton.PersonRPC/SavePerson",
    Person.encode(person),
    config,
  );
  return Person.decode(response);
}

export async function PagedPeople(
  pagedInfo: base.PagedInfo,
  config?: ClientConfiguration,
): Promise<PeoplePaged> {
  const response = await PBrequest(
    "/skeleton.PersonRPC/PagedPeople",
    base.PagedInfo.encode(pagedInfo),
    config,
  );
  return PeoplePaged.decode(response);
}

export async function DeletePerson(
  lookup: base.Lookup,
  config?: ClientConfiguration,
): Promise<base.Deleted> {
  const response = await PBrequest(
    "/skeleton.PersonRPC/DeletePerson",
    base.Lookup.encode(lookup),
    config,
  );
  return base.Deleted.decode(response);
}

//========================================//
//         PersonRPC JSON Client          //
//========================================//

export async function LoadPersonJSON(
  lookup: base.Lookup,
  config?: ClientConfiguration,
): Promise<Person> {
  const response = await JSONrequest(
    "/skeleton.PersonRPC/LoadPerson",
    base.LookupJSON.encode(lookup),
    config,
  );
  return PersonJSON.decode(response);
}

export async function SavePersonJSON(
  person: Person,
  config?: ClientConfiguration,
): Promise<Person> {
  const response = await JSONrequest(
    "/skeleton.PersonRPC/SavePerson",
    PersonJSON.encode(person),
    config,
  );
  return PersonJSON.decode(response);
}

export async function PagedPeopleJSON(
  pagedInfo: base.PagedInfo,
  config?: ClientConfiguration,
): Promise<PeoplePaged> {
  const response = await JSONrequest(
    "/skeleton.PersonRPC/PagedPeople",
    base.PagedInfoJSON.encode(pagedInfo),
    config,
  );
  return PeoplePagedJSON.decode(response);
}

export async function DeletePersonJSON(
  lookup: base.Lookup,
  config?: ClientConfiguration,
): Promise<base.Deleted> {
  const response = await JSONrequest(
    "/skeleton.PersonRPC/DeletePerson",
    base.LookupJSON.encode(lookup),
    config,
  );
  return base.DeletedJSON.decode(response);
}

//========================================//
//               PersonRPC                //
//========================================//

export interface PersonRPC<Context = unknown> {
  LoadPerson: (
    lookup: base.Lookup,
    context: Context,
  ) => Promise<Person> | Person;
  SavePerson: (person: Person, context: Context) => Promise<Person> | Person;
  PagedPeople: (
    pagedInfo: base.PagedInfo,
    context: Context,
  ) => Promise<PeoplePaged> | PeoplePaged;
  DeletePerson: (
    lookup: base.Lookup,
    context: Context,
  ) => Promise<base.Deleted> | base.Deleted;
}

export function createPersonRPC<Context>(service: PersonRPC<Context>) {
  return {
    name: "skeleton.PersonRPC",
    methods: {
      LoadPerson: {
        name: "LoadPerson",
        handler: service.LoadPerson,
        input: { protobuf: base.Lookup, json: base.LookupJSON },
        output: { protobuf: Person, json: PersonJSON },
      },
      SavePerson: {
        name: "SavePerson",
        handler: service.SavePerson,
        input: { protobuf: Person, json: PersonJSON },
        output: { protobuf: Person, json: PersonJSON },
      },
      PagedPeople: {
        name: "PagedPeople",
        handler: service.PagedPeople,
        input: { protobuf: base.PagedInfo, json: base.PagedInfoJSON },
        output: { protobuf: PeoplePaged, json: PeoplePagedJSON },
      },
      DeletePerson: {
        name: "DeletePerson",
        handler: service.DeletePerson,
        input: { protobuf: base.Lookup, json: base.LookupJSON },
        output: { protobuf: base.Deleted, json: base.DeletedJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Person = {
  /**
   * Serializes Person to protobuf.
   */
  encode: function (msg: PartialDeep<Person>): Uint8Array {
    return Person._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Person from protobuf.
   */
  decode: function (bytes: ByteSource): Person {
    return Person._readMessage(
      Person.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Person with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Person>): Person {
    return {
      personUlid: "",
      siteUlid: "",
      dateCreated: "",
      dateModified: "",
      name: "",
      username: "",
      email: "",
      phone: "",
      role: "",
      initials: "",
      password: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Person>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.personUlid) {
      writer.writeString(1, msg.personUlid);
    }
    if (msg.siteUlid) {
      writer.writeString(2, msg.siteUlid);
    }
    if (msg.dateCreated) {
      writer.writeString(3, msg.dateCreated);
    }
    if (msg.dateModified) {
      writer.writeString(4, msg.dateModified);
    }
    if (msg.name) {
      writer.writeString(5, msg.name);
    }
    if (msg.username) {
      writer.writeString(6, msg.username);
    }
    if (msg.email) {
      writer.writeString(7, msg.email);
    }
    if (msg.phone) {
      writer.writeString(8, msg.phone);
    }
    if (msg.role) {
      writer.writeString(9, msg.role);
    }
    if (msg.initials) {
      writer.writeString(10, msg.initials);
    }
    if (msg.password) {
      writer.writeString(11, msg.password);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Person,
    reader: protoscript.BinaryReader,
  ): Person {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personUlid = reader.readString();
          break;
        }
        case 2: {
          msg.siteUlid = reader.readString();
          break;
        }
        case 3: {
          msg.dateCreated = reader.readString();
          break;
        }
        case 4: {
          msg.dateModified = reader.readString();
          break;
        }
        case 5: {
          msg.name = reader.readString();
          break;
        }
        case 6: {
          msg.username = reader.readString();
          break;
        }
        case 7: {
          msg.email = reader.readString();
          break;
        }
        case 8: {
          msg.phone = reader.readString();
          break;
        }
        case 9: {
          msg.role = reader.readString();
          break;
        }
        case 10: {
          msg.initials = reader.readString();
          break;
        }
        case 11: {
          msg.password = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const People = {
  /**
   * Serializes People to protobuf.
   */
  encode: function (msg: PartialDeep<People>): Uint8Array {
    return People._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes People from protobuf.
   */
  decode: function (bytes: ByteSource): People {
    return People._readMessage(
      People.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes People with all fields set to their default value.
   */
  initialize: function (msg?: Partial<People>): People {
    return {
      people: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<People>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.people?.length) {
      writer.writeRepeatedMessage(1, msg.people as any, Person._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: People,
    reader: protoscript.BinaryReader,
  ): People {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Person.initialize();
          reader.readMessage(m, Person._readMessage);
          msg.people.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PeoplePaged = {
  /**
   * Serializes PeoplePaged to protobuf.
   */
  encode: function (msg: PartialDeep<PeoplePaged>): Uint8Array {
    return PeoplePaged._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PeoplePaged from protobuf.
   */
  decode: function (bytes: ByteSource): PeoplePaged {
    return PeoplePaged._readMessage(
      PeoplePaged.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes PeoplePaged with all fields set to their default value.
   */
  initialize: function (msg?: Partial<PeoplePaged>): PeoplePaged {
    return {
      pagedInfo: base.PagedInfo.initialize(),
      records: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PeoplePaged>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.pagedInfo) {
      writer.writeMessage(1, msg.pagedInfo, base.PagedInfo._writeMessage);
    }
    if (msg.records?.length) {
      writer.writeRepeatedMessage(2, msg.records as any, Person._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PeoplePaged,
    reader: protoscript.BinaryReader,
  ): PeoplePaged {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.pagedInfo, base.PagedInfo._readMessage);
          break;
        }
        case 2: {
          const m = Person.initialize();
          reader.readMessage(m, Person._readMessage);
          msg.records.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const PersonJSON = {
  /**
   * Serializes Person to JSON.
   */
  encode: function (msg: PartialDeep<Person>): string {
    return JSON.stringify(PersonJSON._writeMessage(msg));
  },

  /**
   * Deserializes Person from JSON.
   */
  decode: function (json: string): Person {
    return PersonJSON._readMessage(PersonJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Person with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Person>): Person {
    return {
      personUlid: "",
      siteUlid: "",
      dateCreated: "",
      dateModified: "",
      name: "",
      username: "",
      email: "",
      phone: "",
      role: "",
      initials: "",
      password: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Person>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personUlid) {
      json["personUlid"] = msg.personUlid;
    }
    if (msg.siteUlid) {
      json["siteUlid"] = msg.siteUlid;
    }
    if (msg.dateCreated) {
      json["dateCreated"] = msg.dateCreated;
    }
    if (msg.dateModified) {
      json["dateModified"] = msg.dateModified;
    }
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.username) {
      json["username"] = msg.username;
    }
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.phone) {
      json["phone"] = msg.phone;
    }
    if (msg.role) {
      json["role"] = msg.role;
    }
    if (msg.initials) {
      json["initials"] = msg.initials;
    }
    if (msg.password) {
      json["password"] = msg.password;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Person, json: any): Person {
    const _personUlid_ = json["personUlid"] ?? json["person_ulid"];
    if (_personUlid_) {
      msg.personUlid = _personUlid_;
    }
    const _siteUlid_ = json["siteUlid"] ?? json["site_ulid"];
    if (_siteUlid_) {
      msg.siteUlid = _siteUlid_;
    }
    const _dateCreated_ = json["dateCreated"] ?? json["date_created"];
    if (_dateCreated_) {
      msg.dateCreated = _dateCreated_;
    }
    const _dateModified_ = json["dateModified"] ?? json["date_modified"];
    if (_dateModified_) {
      msg.dateModified = _dateModified_;
    }
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _username_ = json["username"];
    if (_username_) {
      msg.username = _username_;
    }
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _phone_ = json["phone"];
    if (_phone_) {
      msg.phone = _phone_;
    }
    const _role_ = json["role"];
    if (_role_) {
      msg.role = _role_;
    }
    const _initials_ = json["initials"];
    if (_initials_) {
      msg.initials = _initials_;
    }
    const _password_ = json["password"];
    if (_password_) {
      msg.password = _password_;
    }
    return msg;
  },
};

export const PeopleJSON = {
  /**
   * Serializes People to JSON.
   */
  encode: function (msg: PartialDeep<People>): string {
    return JSON.stringify(PeopleJSON._writeMessage(msg));
  },

  /**
   * Deserializes People from JSON.
   */
  decode: function (json: string): People {
    return PeopleJSON._readMessage(PeopleJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes People with all fields set to their default value.
   */
  initialize: function (msg?: Partial<People>): People {
    return {
      people: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<People>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.people?.length) {
      json["people"] = msg.people.map(PersonJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: People, json: any): People {
    const _people_ = json["people"];
    if (_people_) {
      for (const item of _people_) {
        const m = PersonJSON.initialize();
        PersonJSON._readMessage(m, item);
        msg.people.push(m);
      }
    }
    return msg;
  },
};

export const PeoplePagedJSON = {
  /**
   * Serializes PeoplePaged to JSON.
   */
  encode: function (msg: PartialDeep<PeoplePaged>): string {
    return JSON.stringify(PeoplePagedJSON._writeMessage(msg));
  },

  /**
   * Deserializes PeoplePaged from JSON.
   */
  decode: function (json: string): PeoplePaged {
    return PeoplePagedJSON._readMessage(
      PeoplePagedJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PeoplePaged with all fields set to their default value.
   */
  initialize: function (msg?: Partial<PeoplePaged>): PeoplePaged {
    return {
      pagedInfo: base.PagedInfoJSON.initialize(),
      records: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PeoplePaged>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.pagedInfo) {
      const _pagedInfo_ = base.PagedInfoJSON._writeMessage(msg.pagedInfo);
      if (Object.keys(_pagedInfo_).length > 0) {
        json["pagedInfo"] = _pagedInfo_;
      }
    }
    if (msg.records?.length) {
      json["records"] = msg.records.map(PersonJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: PeoplePaged, json: any): PeoplePaged {
    const _pagedInfo_ = json["pagedInfo"];
    if (_pagedInfo_) {
      base.PagedInfoJSON._readMessage(msg.pagedInfo, _pagedInfo_);
    }
    const _records_ = json["records"];
    if (_records_) {
      for (const item of _records_) {
        const m = PersonJSON.initialize();
        PersonJSON._readMessage(m, item);
        msg.records.push(m);
      }
    }
    return msg;
  },
};
