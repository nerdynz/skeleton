// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: person.proto

import type { ByteSource, ClientConfiguration } from "twirpscript";
import {
  BinaryReader,
  BinaryWriter,
  JSONrequest,
  PBrequest,
} from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `yarn twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_49 } from "twirpscript";

import { PagedInfo, Lookup, Deleted } from "./base.pb";

//========================================//
//       PersonRPC Protobuf Client        //
//========================================//

export async function LoadPerson(
  lookup: Lookup,
  config?: ClientConfiguration
): Promise<Person> {
  const response = await PBrequest(
    "/skeleton.PersonRPC/LoadPerson",
    Lookup.encode(lookup),
    config
  );
  return Person.decode(response);
}

export async function SavePerson(
  person: Person,
  config?: ClientConfiguration
): Promise<Person> {
  const response = await PBrequest(
    "/skeleton.PersonRPC/SavePerson",
    Person.encode(person),
    config
  );
  return Person.decode(response);
}

export async function PagedPeople(
  pagedInfo: PagedInfo,
  config?: ClientConfiguration
): Promise<PeoplePaged> {
  const response = await PBrequest(
    "/skeleton.PersonRPC/PagedPeople",
    PagedInfo.encode(pagedInfo),
    config
  );
  return PeoplePaged.decode(response);
}

export async function DeletePerson(
  lookup: Lookup,
  config?: ClientConfiguration
): Promise<Deleted> {
  const response = await PBrequest(
    "/skeleton.PersonRPC/DeletePerson",
    Lookup.encode(lookup),
    config
  );
  return Deleted.decode(response);
}

//========================================//
//         PersonRPC JSON Client          //
//========================================//

export async function LoadPersonJSON(
  lookup: Lookup,
  config?: ClientConfiguration
): Promise<Person> {
  const response = await JSONrequest<Person>(
    "/skeleton.PersonRPC/LoadPerson",
    lookup,
    config
  );
  return response;
}

export async function SavePersonJSON(
  person: Person,
  config?: ClientConfiguration
): Promise<Person> {
  const response = await JSONrequest<Person>(
    "/skeleton.PersonRPC/SavePerson",
    person,
    config
  );
  return response;
}

export async function PagedPeopleJSON(
  pagedInfo: PagedInfo,
  config?: ClientConfiguration
): Promise<PeoplePaged> {
  const response = await JSONrequest<PeoplePaged>(
    "/skeleton.PersonRPC/PagedPeople",
    pagedInfo,
    config
  );
  return response;
}

export async function DeletePersonJSON(
  lookup: Lookup,
  config?: ClientConfiguration
): Promise<Deleted> {
  const response = await JSONrequest<Deleted>(
    "/skeleton.PersonRPC/DeletePerson",
    lookup,
    config
  );
  return response;
}

//========================================//
//               PersonRPC                //
//========================================//

export interface PersonRPC<Context = unknown> {
  LoadPerson: (lookup: Lookup, context: Context) => Promise<Person> | Person;
  SavePerson: (person: Person, context: Context) => Promise<Person> | Person;
  PagedPeople: (
    pagedInfo: PagedInfo,
    context: Context
  ) => Promise<PeoplePaged> | PeoplePaged;
  DeletePerson: (
    lookup: Lookup,
    context: Context
  ) => Promise<Deleted> | Deleted;
}

export function createPersonRPC<Context>(service: PersonRPC<Context>) {
  return {
    name: "skeleton.PersonRPC",
    methods: {
      LoadPerson: {
        name: "LoadPerson",
        handler: service.LoadPerson,
        input: Lookup,
        output: Person,
      },
      SavePerson: {
        name: "SavePerson",
        handler: service.SavePerson,
        input: Person,
        output: Person,
      },
      PagedPeople: {
        name: "PagedPeople",
        handler: service.PagedPeople,
        input: PagedInfo,
        output: PeoplePaged,
      },
      DeletePerson: {
        name: "DeletePerson",
        handler: service.DeletePerson,
        input: Lookup,
        output: Deleted,
      },
    },
  } as const;
}

//========================================//
//                 Types                  //
//========================================//

export interface Person {
  personUlid: string;
  siteUlid: string;
  dateCreated: string;
  dateModified: string;
  name: string;
  username: string;
  email: string;
  phone: string;
  role: string;
  initials: string;
  password: string;
}

export interface People {
  people: Person[];
}

export interface PeoplePaged {
  pagedInfo: PagedInfo;
  records: Person[];
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Person = {
  /**
   * Serializes a Person to protobuf.
   */
  encode: function (msg: Partial<Person>): Uint8Array {
    return Person._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes a Person from protobuf.
   */
  decode: function (bytes: ByteSource): Person {
    return Person._readMessage(Person.initialize(), new BinaryReader(bytes));
  },

  /**
   * Serializes a Person to JSON.
   */
  encodeJSON: function (msg: Partial<Person>): string {
    return JSON.stringify(Person._writeMessageJSON(msg));
  },

  /**
   * Deserializes a Person from JSON.
   */
  decodeJSON: function (json: string): Person {
    return Person._readMessageJSON(Person.initialize(), JSON.parse(json));
  },

  /**
   * Initializes a Person with all fields set to their default value.
   */
  initialize: function (): Person {
    return {
      personUlid: "",
      siteUlid: "",
      dateCreated: "",
      dateModified: "",
      name: "",
      username: "",
      email: "",
      phone: "",
      role: "",
      initials: "",
      password: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Person>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.personUlid) {
      writer.writeString(1, msg.personUlid);
    }
    if (msg.siteUlid) {
      writer.writeString(2, msg.siteUlid);
    }
    if (msg.dateCreated) {
      writer.writeString(3, msg.dateCreated);
    }
    if (msg.dateModified) {
      writer.writeString(4, msg.dateModified);
    }
    if (msg.name) {
      writer.writeString(5, msg.name);
    }
    if (msg.username) {
      writer.writeString(6, msg.username);
    }
    if (msg.email) {
      writer.writeString(7, msg.email);
    }
    if (msg.phone) {
      writer.writeString(8, msg.phone);
    }
    if (msg.role) {
      writer.writeString(9, msg.role);
    }
    if (msg.initials) {
      writer.writeString(10, msg.initials);
    }
    if (msg.password) {
      writer.writeString(11, msg.password);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg: Partial<Person>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personUlid) {
      json.personUlid = msg.personUlid;
    }
    if (msg.siteUlid) {
      json.siteUlid = msg.siteUlid;
    }
    if (msg.dateCreated) {
      json.dateCreated = msg.dateCreated;
    }
    if (msg.dateModified) {
      json.dateModified = msg.dateModified;
    }
    if (msg.name) {
      json.name = msg.name;
    }
    if (msg.username) {
      json.username = msg.username;
    }
    if (msg.email) {
      json.email = msg.email;
    }
    if (msg.phone) {
      json.phone = msg.phone;
    }
    if (msg.role) {
      json.role = msg.role;
    }
    if (msg.initials) {
      json.initials = msg.initials;
    }
    if (msg.password) {
      json.password = msg.password;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Person, reader: BinaryReader): Person {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personUlid = reader.readString();
          break;
        }
        case 2: {
          msg.siteUlid = reader.readString();
          break;
        }
        case 3: {
          msg.dateCreated = reader.readString();
          break;
        }
        case 4: {
          msg.dateModified = reader.readString();
          break;
        }
        case 5: {
          msg.name = reader.readString();
          break;
        }
        case 6: {
          msg.username = reader.readString();
          break;
        }
        case 7: {
          msg.email = reader.readString();
          break;
        }
        case 8: {
          msg.phone = reader.readString();
          break;
        }
        case 9: {
          msg.role = reader.readString();
          break;
        }
        case 10: {
          msg.initials = reader.readString();
          break;
        }
        case 11: {
          msg.password = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg: Person, json: any): Person {
    const _personUlid = json.personUlid ?? json.person_ulid;
    if (_personUlid) {
      msg.personUlid = _personUlid;
    }
    const _siteUlid = json.siteUlid ?? json.site_ulid;
    if (_siteUlid) {
      msg.siteUlid = _siteUlid;
    }
    const _dateCreated = json.dateCreated ?? json.date_created;
    if (_dateCreated) {
      msg.dateCreated = _dateCreated;
    }
    const _dateModified = json.dateModified ?? json.date_modified;
    if (_dateModified) {
      msg.dateModified = _dateModified;
    }
    const _name = json.name;
    if (_name) {
      msg.name = _name;
    }
    const _username = json.username;
    if (_username) {
      msg.username = _username;
    }
    const _email = json.email;
    if (_email) {
      msg.email = _email;
    }
    const _phone = json.phone;
    if (_phone) {
      msg.phone = _phone;
    }
    const _role = json.role;
    if (_role) {
      msg.role = _role;
    }
    const _initials = json.initials;
    if (_initials) {
      msg.initials = _initials;
    }
    const _password = json.password;
    if (_password) {
      msg.password = _password;
    }
    return msg;
  },
};

export const People = {
  /**
   * Serializes a People to protobuf.
   */
  encode: function (msg: Partial<People>): Uint8Array {
    return People._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes a People from protobuf.
   */
  decode: function (bytes: ByteSource): People {
    return People._readMessage(People.initialize(), new BinaryReader(bytes));
  },

  /**
   * Serializes a People to JSON.
   */
  encodeJSON: function (msg: Partial<People>): string {
    return JSON.stringify(People._writeMessageJSON(msg));
  },

  /**
   * Deserializes a People from JSON.
   */
  decodeJSON: function (json: string): People {
    return People._readMessageJSON(People.initialize(), JSON.parse(json));
  },

  /**
   * Initializes a People with all fields set to their default value.
   */
  initialize: function (): People {
    return {
      people: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<People>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.people?.length) {
      writer.writeRepeatedMessage(1, msg.people as any, Person._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg: Partial<People>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.people?.length) {
      json.people = msg.people.map(Person._writeMessageJSON);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: People, reader: BinaryReader): People {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Person.initialize();
          reader.readMessage(m, Person._readMessage);
          msg.people.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg: People, json: any): People {
    const _people = json.people;
    if (_people) {
      for (const item of _people) {
        const m = Person.initialize();
        Person._readMessageJSON(m, item);
        msg.people.push(m);
      }
    }
    return msg;
  },
};

export const PeoplePaged = {
  /**
   * Serializes a PeoplePaged to protobuf.
   */
  encode: function (msg: Partial<PeoplePaged>): Uint8Array {
    return PeoplePaged._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes a PeoplePaged from protobuf.
   */
  decode: function (bytes: ByteSource): PeoplePaged {
    return PeoplePaged._readMessage(
      PeoplePaged.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a PeoplePaged to JSON.
   */
  encodeJSON: function (msg: Partial<PeoplePaged>): string {
    return JSON.stringify(PeoplePaged._writeMessageJSON(msg));
  },

  /**
   * Deserializes a PeoplePaged from JSON.
   */
  decodeJSON: function (json: string): PeoplePaged {
    return PeoplePaged._readMessageJSON(
      PeoplePaged.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a PeoplePaged with all fields set to their default value.
   */
  initialize: function (): PeoplePaged {
    return {
      pagedInfo: PagedInfo.initialize(),
      records: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PeoplePaged>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.pagedInfo) {
      writer.writeMessage(1, msg.pagedInfo, PagedInfo._writeMessage);
    }
    if (msg.records?.length) {
      writer.writeRepeatedMessage(2, msg.records as any, Person._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (
    msg: Partial<PeoplePaged>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.pagedInfo) {
      const pagedInfo = PagedInfo._writeMessageJSON(msg.pagedInfo);
      if (Object.keys(pagedInfo).length > 0) {
        json.pagedInfo = pagedInfo;
      }
    }
    if (msg.records?.length) {
      json.records = msg.records.map(Person._writeMessageJSON);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: PeoplePaged, reader: BinaryReader): PeoplePaged {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.pagedInfo, PagedInfo._readMessage);
          break;
        }
        case 2: {
          const m = Person.initialize();
          reader.readMessage(m, Person._readMessage);
          msg.records.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg: PeoplePaged, json: any): PeoplePaged {
    const _pagedInfo = json.pagedInfo;
    if (_pagedInfo) {
      const m = PagedInfo.initialize();
      PagedInfo._readMessageJSON(m, _pagedInfo);
      msg.pagedInfo = m;
    }
    const _records = json.records;
    if (_records) {
      for (const item of _records) {
        const m = Person.initialize();
        Person._readMessageJSON(m, item);
        msg.records.push(m);
      }
    }
    return msg;
  },
};
