// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: access.proto

import type { ByteSource, ClientConfiguration } from "twirpscript";
import {
  BinaryReader,
  BinaryWriter,
  JSONrequest,
  PBrequest,
} from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `yarn twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_49 } from "twirpscript";

//========================================//
//         Access Protobuf Client         //
//========================================//

export async function Login(
  unauthorisedUser: UnauthorisedUser,
  config?: ClientConfiguration
): Promise<SessionInfo> {
  const response = await PBrequest(
    "/nerdynz.Access/Login",
    UnauthorisedUser.encode(unauthorisedUser),
    config
  );
  return SessionInfo.decode(response);
}

export async function ValidSites(
  sitesQuery: SitesQuery,
  config?: ClientConfiguration
): Promise<Sites> {
  const response = await PBrequest(
    "/nerdynz.Access/ValidSites",
    SitesQuery.encode(sitesQuery),
    config
  );
  return Sites.decode(response);
}

export async function Logout(
  invalidateUser: InvalidateUser,
  config?: ClientConfiguration
): Promise<InvalidateSuccess> {
  const response = await PBrequest(
    "/nerdynz.Access/Logout",
    InvalidateUser.encode(invalidateUser),
    config
  );
  return InvalidateSuccess.decode(response);
}

//========================================//
//           Access JSON Client           //
//========================================//

export async function LoginJSON(
  unauthorisedUser: UnauthorisedUser,
  config?: ClientConfiguration
): Promise<SessionInfo> {
  const response = await JSONrequest<SessionInfo>(
    "/nerdynz.Access/Login",
    unauthorisedUser,
    config
  );
  return response;
}

export async function ValidSitesJSON(
  sitesQuery: SitesQuery,
  config?: ClientConfiguration
): Promise<Sites> {
  const response = await JSONrequest<Sites>(
    "/nerdynz.Access/ValidSites",
    sitesQuery,
    config
  );
  return response;
}

export async function LogoutJSON(
  invalidateUser: InvalidateUser,
  config?: ClientConfiguration
): Promise<InvalidateSuccess> {
  const response = await JSONrequest<InvalidateSuccess>(
    "/nerdynz.Access/Logout",
    invalidateUser,
    config
  );
  return response;
}

//========================================//
//                 Access                 //
//========================================//

export interface Access<Context = unknown> {
  Login: (
    unauthorisedUser: UnauthorisedUser,
    context: Context
  ) => Promise<SessionInfo> | SessionInfo;
  ValidSites: (
    sitesQuery: SitesQuery,
    context: Context
  ) => Promise<Sites> | Sites;
  Logout: (
    invalidateUser: InvalidateUser,
    context: Context
  ) => Promise<InvalidateSuccess> | InvalidateSuccess;
}

export function createAccess<Context>(service: Access<Context>) {
  return {
    name: "nerdynz.Access",
    methods: {
      Login: {
        name: "Login",
        handler: service.Login,
        input: UnauthorisedUser,
        output: SessionInfo,
      },
      ValidSites: {
        name: "ValidSites",
        handler: service.ValidSites,
        input: SitesQuery,
        output: Sites,
      },
      Logout: {
        name: "Logout",
        handler: service.Logout,
        input: InvalidateUser,
        output: InvalidateSuccess,
      },
    },
  } as const;
}

//========================================//
//                 Types                  //
//========================================//

export interface SitesQuery {
  email: string;
}

export interface UnauthorisedUser {
  email: string;
  password: string;
  siteUlid: string;
}

export interface SessionInfo {
  user: SessionUser;
  token: string;
  expiration: number;
  sites: Site[];
}

export interface SessionUser {
  username: string;
  name: string;
  email: string;
  password: string;
  role: string;
  picture: string;
  initials: string;
  ulid: string;
  siteUlid: string;
}

export interface Site {
  name: string;
  siteUlid: string;
}

export interface Sites {
  sites: Site[];
}

export interface InvalidateUser {
  email: string;
  siteUlid: string;
}

export interface InvalidateSuccess {
  isSuccess: boolean;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const SitesQuery = {
  /**
   * Serializes a SitesQuery to protobuf.
   */
  encode: function (msg: Partial<SitesQuery>): Uint8Array {
    return SitesQuery._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes a SitesQuery from protobuf.
   */
  decode: function (bytes: ByteSource): SitesQuery {
    return SitesQuery._readMessage(
      SitesQuery.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a SitesQuery to JSON.
   */
  encodeJSON: function (msg: Partial<SitesQuery>): string {
    return JSON.stringify(SitesQuery._writeMessageJSON(msg));
  },

  /**
   * Deserializes a SitesQuery from JSON.
   */
  decodeJSON: function (json: string): SitesQuery {
    return SitesQuery._readMessageJSON(
      SitesQuery.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a SitesQuery with all fields set to their default value.
   */
  initialize: function (): SitesQuery {
    return {
      email: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<SitesQuery>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (
    msg: Partial<SitesQuery>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.email) {
      json.email = msg.email;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: SitesQuery, reader: BinaryReader): SitesQuery {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg: SitesQuery, json: any): SitesQuery {
    const _email = json.email;
    if (_email) {
      msg.email = _email;
    }
    return msg;
  },
};

export const UnauthorisedUser = {
  /**
   * Serializes a UnauthorisedUser to protobuf.
   */
  encode: function (msg: Partial<UnauthorisedUser>): Uint8Array {
    return UnauthorisedUser._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a UnauthorisedUser from protobuf.
   */
  decode: function (bytes: ByteSource): UnauthorisedUser {
    return UnauthorisedUser._readMessage(
      UnauthorisedUser.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a UnauthorisedUser to JSON.
   */
  encodeJSON: function (msg: Partial<UnauthorisedUser>): string {
    return JSON.stringify(UnauthorisedUser._writeMessageJSON(msg));
  },

  /**
   * Deserializes a UnauthorisedUser from JSON.
   */
  decodeJSON: function (json: string): UnauthorisedUser {
    return UnauthorisedUser._readMessageJSON(
      UnauthorisedUser.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a UnauthorisedUser with all fields set to their default value.
   */
  initialize: function (): UnauthorisedUser {
    return {
      email: "",
      password: "",
      siteUlid: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UnauthorisedUser>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    if (msg.password) {
      writer.writeString(2, msg.password);
    }
    if (msg.siteUlid) {
      writer.writeString(3, msg.siteUlid);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (
    msg: Partial<UnauthorisedUser>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.email) {
      json.email = msg.email;
    }
    if (msg.password) {
      json.password = msg.password;
    }
    if (msg.siteUlid) {
      json.siteUlid = msg.siteUlid;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UnauthorisedUser,
    reader: BinaryReader
  ): UnauthorisedUser {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        case 2: {
          msg.password = reader.readString();
          break;
        }
        case 3: {
          msg.siteUlid = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (
    msg: UnauthorisedUser,
    json: any
  ): UnauthorisedUser {
    const _email = json.email;
    if (_email) {
      msg.email = _email;
    }
    const _password = json.password;
    if (_password) {
      msg.password = _password;
    }
    const _siteUlid = json.siteUlid ?? json.site_ulid;
    if (_siteUlid) {
      msg.siteUlid = _siteUlid;
    }
    return msg;
  },
};

export const SessionInfo = {
  /**
   * Serializes a SessionInfo to protobuf.
   */
  encode: function (msg: Partial<SessionInfo>): Uint8Array {
    return SessionInfo._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes a SessionInfo from protobuf.
   */
  decode: function (bytes: ByteSource): SessionInfo {
    return SessionInfo._readMessage(
      SessionInfo.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a SessionInfo to JSON.
   */
  encodeJSON: function (msg: Partial<SessionInfo>): string {
    return JSON.stringify(SessionInfo._writeMessageJSON(msg));
  },

  /**
   * Deserializes a SessionInfo from JSON.
   */
  decodeJSON: function (json: string): SessionInfo {
    return SessionInfo._readMessageJSON(
      SessionInfo.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a SessionInfo with all fields set to their default value.
   */
  initialize: function (): SessionInfo {
    return {
      user: SessionUser.initialize(),
      token: "",
      expiration: 0,
      sites: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<SessionInfo>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.user) {
      writer.writeMessage(1, msg.user, SessionUser._writeMessage);
    }
    if (msg.token) {
      writer.writeString(2, msg.token);
    }
    if (msg.expiration) {
      writer.writeInt32(3, msg.expiration);
    }
    if (msg.sites?.length) {
      writer.writeRepeatedMessage(4, msg.sites as any, Site._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (
    msg: Partial<SessionInfo>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.user) {
      const user = SessionUser._writeMessageJSON(msg.user);
      if (Object.keys(user).length > 0) {
        json.user = user;
      }
    }
    if (msg.token) {
      json.token = msg.token;
    }
    if (msg.expiration) {
      json.expiration = msg.expiration;
    }
    if (msg.sites?.length) {
      json.sites = msg.sites.map(Site._writeMessageJSON);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: SessionInfo, reader: BinaryReader): SessionInfo {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.user, SessionUser._readMessage);
          break;
        }
        case 2: {
          msg.token = reader.readString();
          break;
        }
        case 3: {
          msg.expiration = reader.readInt32();
          break;
        }
        case 4: {
          const m = Site.initialize();
          reader.readMessage(m, Site._readMessage);
          msg.sites.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg: SessionInfo, json: any): SessionInfo {
    const _user = json.user;
    if (_user) {
      const m = SessionUser.initialize();
      SessionUser._readMessageJSON(m, _user);
      msg.user = m;
    }
    const _token = json.token;
    if (_token) {
      msg.token = _token;
    }
    const _expiration = json.expiration;
    if (_expiration) {
      msg.expiration = _expiration;
    }
    const _sites = json.sites;
    if (_sites) {
      for (const item of _sites) {
        const m = Site.initialize();
        Site._readMessageJSON(m, item);
        msg.sites.push(m);
      }
    }
    return msg;
  },
};

export const SessionUser = {
  /**
   * Serializes a SessionUser to protobuf.
   */
  encode: function (msg: Partial<SessionUser>): Uint8Array {
    return SessionUser._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes a SessionUser from protobuf.
   */
  decode: function (bytes: ByteSource): SessionUser {
    return SessionUser._readMessage(
      SessionUser.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a SessionUser to JSON.
   */
  encodeJSON: function (msg: Partial<SessionUser>): string {
    return JSON.stringify(SessionUser._writeMessageJSON(msg));
  },

  /**
   * Deserializes a SessionUser from JSON.
   */
  decodeJSON: function (json: string): SessionUser {
    return SessionUser._readMessageJSON(
      SessionUser.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a SessionUser with all fields set to their default value.
   */
  initialize: function (): SessionUser {
    return {
      username: "",
      name: "",
      email: "",
      password: "",
      role: "",
      picture: "",
      initials: "",
      ulid: "",
      siteUlid: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<SessionUser>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.username) {
      writer.writeString(1, msg.username);
    }
    if (msg.name) {
      writer.writeString(2, msg.name);
    }
    if (msg.email) {
      writer.writeString(3, msg.email);
    }
    if (msg.password) {
      writer.writeString(4, msg.password);
    }
    if (msg.role) {
      writer.writeString(5, msg.role);
    }
    if (msg.picture) {
      writer.writeString(6, msg.picture);
    }
    if (msg.initials) {
      writer.writeString(7, msg.initials);
    }
    if (msg.ulid) {
      writer.writeString(8, msg.ulid);
    }
    if (msg.siteUlid) {
      writer.writeString(9, msg.siteUlid);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (
    msg: Partial<SessionUser>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.username) {
      json.username = msg.username;
    }
    if (msg.name) {
      json.name = msg.name;
    }
    if (msg.email) {
      json.email = msg.email;
    }
    if (msg.password) {
      json.password = msg.password;
    }
    if (msg.role) {
      json.role = msg.role;
    }
    if (msg.picture) {
      json.picture = msg.picture;
    }
    if (msg.initials) {
      json.initials = msg.initials;
    }
    if (msg.ulid) {
      json.ulid = msg.ulid;
    }
    if (msg.siteUlid) {
      json.siteUlid = msg.siteUlid;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: SessionUser, reader: BinaryReader): SessionUser {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.username = reader.readString();
          break;
        }
        case 2: {
          msg.name = reader.readString();
          break;
        }
        case 3: {
          msg.email = reader.readString();
          break;
        }
        case 4: {
          msg.password = reader.readString();
          break;
        }
        case 5: {
          msg.role = reader.readString();
          break;
        }
        case 6: {
          msg.picture = reader.readString();
          break;
        }
        case 7: {
          msg.initials = reader.readString();
          break;
        }
        case 8: {
          msg.ulid = reader.readString();
          break;
        }
        case 9: {
          msg.siteUlid = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg: SessionUser, json: any): SessionUser {
    const _username = json.username;
    if (_username) {
      msg.username = _username;
    }
    const _name = json.name;
    if (_name) {
      msg.name = _name;
    }
    const _email = json.email;
    if (_email) {
      msg.email = _email;
    }
    const _password = json.password;
    if (_password) {
      msg.password = _password;
    }
    const _role = json.role;
    if (_role) {
      msg.role = _role;
    }
    const _picture = json.picture;
    if (_picture) {
      msg.picture = _picture;
    }
    const _initials = json.initials;
    if (_initials) {
      msg.initials = _initials;
    }
    const _ulid = json.ulid;
    if (_ulid) {
      msg.ulid = _ulid;
    }
    const _siteUlid = json.siteUlid ?? json.site_ulid;
    if (_siteUlid) {
      msg.siteUlid = _siteUlid;
    }
    return msg;
  },
};

export const Site = {
  /**
   * Serializes a Site to protobuf.
   */
  encode: function (msg: Partial<Site>): Uint8Array {
    return Site._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes a Site from protobuf.
   */
  decode: function (bytes: ByteSource): Site {
    return Site._readMessage(Site.initialize(), new BinaryReader(bytes));
  },

  /**
   * Serializes a Site to JSON.
   */
  encodeJSON: function (msg: Partial<Site>): string {
    return JSON.stringify(Site._writeMessageJSON(msg));
  },

  /**
   * Deserializes a Site from JSON.
   */
  decodeJSON: function (json: string): Site {
    return Site._readMessageJSON(Site.initialize(), JSON.parse(json));
  },

  /**
   * Initializes a Site with all fields set to their default value.
   */
  initialize: function (): Site {
    return {
      name: "",
      siteUlid: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Site>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.siteUlid) {
      writer.writeString(2, msg.siteUlid);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg: Partial<Site>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json.name = msg.name;
    }
    if (msg.siteUlid) {
      json.siteUlid = msg.siteUlid;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Site, reader: BinaryReader): Site {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          msg.siteUlid = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg: Site, json: any): Site {
    const _name = json.name;
    if (_name) {
      msg.name = _name;
    }
    const _siteUlid = json.siteUlid ?? json.site_ulid;
    if (_siteUlid) {
      msg.siteUlid = _siteUlid;
    }
    return msg;
  },
};

export const Sites = {
  /**
   * Serializes a Sites to protobuf.
   */
  encode: function (msg: Partial<Sites>): Uint8Array {
    return Sites._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes a Sites from protobuf.
   */
  decode: function (bytes: ByteSource): Sites {
    return Sites._readMessage(Sites.initialize(), new BinaryReader(bytes));
  },

  /**
   * Serializes a Sites to JSON.
   */
  encodeJSON: function (msg: Partial<Sites>): string {
    return JSON.stringify(Sites._writeMessageJSON(msg));
  },

  /**
   * Deserializes a Sites from JSON.
   */
  decodeJSON: function (json: string): Sites {
    return Sites._readMessageJSON(Sites.initialize(), JSON.parse(json));
  },

  /**
   * Initializes a Sites with all fields set to their default value.
   */
  initialize: function (): Sites {
    return {
      sites: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Sites>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.sites?.length) {
      writer.writeRepeatedMessage(1, msg.sites as any, Site._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg: Partial<Sites>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.sites?.length) {
      json.sites = msg.sites.map(Site._writeMessageJSON);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Sites, reader: BinaryReader): Sites {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Site.initialize();
          reader.readMessage(m, Site._readMessage);
          msg.sites.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg: Sites, json: any): Sites {
    const _sites = json.sites;
    if (_sites) {
      for (const item of _sites) {
        const m = Site.initialize();
        Site._readMessageJSON(m, item);
        msg.sites.push(m);
      }
    }
    return msg;
  },
};

export const InvalidateUser = {
  /**
   * Serializes a InvalidateUser to protobuf.
   */
  encode: function (msg: Partial<InvalidateUser>): Uint8Array {
    return InvalidateUser._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a InvalidateUser from protobuf.
   */
  decode: function (bytes: ByteSource): InvalidateUser {
    return InvalidateUser._readMessage(
      InvalidateUser.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a InvalidateUser to JSON.
   */
  encodeJSON: function (msg: Partial<InvalidateUser>): string {
    return JSON.stringify(InvalidateUser._writeMessageJSON(msg));
  },

  /**
   * Deserializes a InvalidateUser from JSON.
   */
  decodeJSON: function (json: string): InvalidateUser {
    return InvalidateUser._readMessageJSON(
      InvalidateUser.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a InvalidateUser with all fields set to their default value.
   */
  initialize: function (): InvalidateUser {
    return {
      email: "",
      siteUlid: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<InvalidateUser>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    if (msg.siteUlid) {
      writer.writeString(2, msg.siteUlid);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (
    msg: Partial<InvalidateUser>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.email) {
      json.email = msg.email;
    }
    if (msg.siteUlid) {
      json.siteUlid = msg.siteUlid;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: InvalidateUser,
    reader: BinaryReader
  ): InvalidateUser {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        case 2: {
          msg.siteUlid = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg: InvalidateUser, json: any): InvalidateUser {
    const _email = json.email;
    if (_email) {
      msg.email = _email;
    }
    const _siteUlid = json.siteUlid ?? json.site_ulid;
    if (_siteUlid) {
      msg.siteUlid = _siteUlid;
    }
    return msg;
  },
};

export const InvalidateSuccess = {
  /**
   * Serializes a InvalidateSuccess to protobuf.
   */
  encode: function (msg: Partial<InvalidateSuccess>): Uint8Array {
    return InvalidateSuccess._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a InvalidateSuccess from protobuf.
   */
  decode: function (bytes: ByteSource): InvalidateSuccess {
    return InvalidateSuccess._readMessage(
      InvalidateSuccess.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a InvalidateSuccess to JSON.
   */
  encodeJSON: function (msg: Partial<InvalidateSuccess>): string {
    return JSON.stringify(InvalidateSuccess._writeMessageJSON(msg));
  },

  /**
   * Deserializes a InvalidateSuccess from JSON.
   */
  decodeJSON: function (json: string): InvalidateSuccess {
    return InvalidateSuccess._readMessageJSON(
      InvalidateSuccess.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a InvalidateSuccess with all fields set to their default value.
   */
  initialize: function (): InvalidateSuccess {
    return {
      isSuccess: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<InvalidateSuccess>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.isSuccess) {
      writer.writeBool(1, msg.isSuccess);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (
    msg: Partial<InvalidateSuccess>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.isSuccess) {
      json.isSuccess = msg.isSuccess;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: InvalidateSuccess,
    reader: BinaryReader
  ): InvalidateSuccess {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.isSuccess = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (
    msg: InvalidateSuccess,
    json: any
  ): InvalidateSuccess {
    const _isSuccess = json.isSuccess ?? json.is_success;
    if (_isSuccess) {
      msg.isSuccess = _isSuccess;
    }
    return msg;
  },
};
