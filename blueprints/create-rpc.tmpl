package {{.TableName}}

import (
	"context"

	"github.com/nerdynz/datastore"
	twirp "github.com/twitchtv/twirp"
	base "github.com/nerdynz/skeleton/rpc/base"
)

type {{.TableNamePascal}}Server struct {
	datastore    *datastore.Datastore
	{{.TableNameCamel}}Helper *{{.TableNamePascal}}Helper
}

func NewServer(datastore *datastore.Datastore) TwirpServer {
	return New{{.TableNamePascal}}RPCServer(&{{.TableNamePascal}}Server{
		datastore:    datastore,
		{{.TableNameCamel}}Helper: new{{.TableNamePascal}}Helper(datastore),
	})
}

func (s *{{.TableNamePascal}}Server) Save{{.TableNamePascal}}(ctx context.Context, {{.TableNameCamel}} *{{.TableNamePascal}}) (*{{.TableNamePascal}}, error) {
	err := s.{{.TableNameCamel}}Helper.Save(ctx, {{.TableNameCamel}})
	if err != nil {
		return nil, twirp.InternalError(err.Error())
	}
	return {{.TableNameCamel}}, nil
}

func (s *{{.TableNamePascal}}Server) Load{{.TableNamePascal}}(ctx context.Context, lookup *base.Lookup) (*{{.TableNamePascal}}, error) {
	{{.TableNameCamel}}, err := s.{{.TableNameCamel}}Helper.Load(ctx, lookup.Ulid)
	if err != nil {
		return nil, twirp.InternalError(err.Error())
	}
	return {{.TableNameCamel}}, err
}


func (s *{{.TableNamePascal}}Server) Load{{.TableNamePluralPascal}}(ctx context.Context, lookup *base.Lookup) (*{{.TableNamePluralPascal}}, error) {
	{{.TableNamePluralCamel}}, err := s.{{.TableNameCamel}}Helper.All(ctx, siteUlid)
	if err != nil {
		return nil, twirp.InternalError(err.Error())
	}
	return &{{.TableNamePluralPascal}}{
		{{.TableNamePluralPascal}}: {{.TableNamePluralCamel}},
	}, err
}

func (s *{{.TableNamePascal}}Server) Paged{{.TableNamePluralPascal}}(ctx context.Context, pagedInfo *base.PagedInfo) (*{{.TableNamePluralPascal}}Paged, error) {
	pagedData, err := s.{{.TableNameCamel}}Helper.PagedBy(ctx, pagedInfo.PageNumber, pagedInfo.Limit, pagedInfo.OrderBy, pagedInfo.Direction.String(), pagedInfo.Search)
	if err != nil {
		return nil, twirp.NewError(twirp.Malformed, err.Error())
	}	
	return pagedData, nil
}

func (s *{{.TableNamePascal}}Server) Delete{{.TableNamePascal}}(ctx context.Context, lookup *base.Lookup) (*base.Deleted, error) {
	isDeleted, err := s.{{.TableNameCamel}}Helper.Delete(ctx, lookup.Ulid)
	if err != nil {
		return nil, twirp.InternalError(err.Error())
	}
	return &base.Deleted{
		IsDeleted: isDeleted,
	}, nil
}
