{{$global := .}}
<template>
  <with-actions class="fh-card p-4" :actions="actions" :paged-info="pagedInfo" @pagination-changed="changePageInfo">
    <template #left>
      <h1 class="title is-3 mb-0">{{.TableNamePascal}}s</h1>
    </template>
    <template #right>
      <form-field for="search" icon="free-search" label="Search" class="with-button">
        <input class="input" name="search" v-model.trim="pagedInfo.search" type="text" @keyup.enter="loadData" @keyup.esc="pagedInfo.search = ''" autocomplete="off" />
      </form-field>
      {{.LTStr}}!--<button class="button is-primary" @click="actions.find((a:any) => a.name === 'Create {{.TableNamePascal}}')?.action">Create {{.TableNamePascal}}</button>--{{.GTStr}}
    </template>
    <b-table
      datakey="{{.TableUlidCamel}}"
      custom-row-key="{{.TableUlidCamel}}"
      :data="records"
      paginated
      :per-page="pagedInfo.limit"
      :backend-pagination="true"
      :backend-sorting="true"
      :total="pagedInfo.total"
      :default-sort="['dateCreated', 'desc']"
      @sort="sort"
      @page-change="pageChange"
      :striped="true">
      {{range $index, $col := .Columns}}<b-table-column v-slot="props" field="{{$col.NameCamelCase}}" label="{{$col.Label}}" sortable>
        {{$global.LEFT_BRACE}}{{$global.LEFT_BRACE}} props.row.{{$col.NameCamelCase}} {{$global.RIGHT_BRACE}}{{$global.RIGHT_BRACE}}
      </b-table-column>{{end}}
    </b-table>
    <loading :on="['Load{{.TableNamePluralPascal}}']" />
  </with-actions>
  <router-view />
</template>

{{.LTStr}}script lang="ts" setup{{.GTStr}}
import {{.TableNameCamel}}Api from '@/api/{{.TableNameCamel}}'
import { PagedInfo } from '@/api/pb/base.pb'
import { {{.TableNamePascal}} } from '@/api/pb/{{.TableNameCamel}}.pb'

import { computed, onMounted, ref, Ref, watch } from 'vue'
import { useRoute, useRouter } from 'vue-router'

const columns: Array<any> = [
  {
    field: 'actions',
    label: '',
    heading: '',
    format: 'custom',
    sortEnabled: false,
  },
{{range $index, $column := .Columns}}{{ if eq $column.ColumnNamePascal "ULID"}}{{ else if $column.IsID}}{{ else if $column.IsSort }}{{else}}
   {
    field: '{{$column.ColumnNameCamel}}',
    label: '{{$column.ColumnNameSplitTitle}}',
    format:  {{ if $column.IsDate }}'date'{{else}}'text'{{end}},
    align: 'left',
  },{{ end }}{{ end }}
]

const route = useRoute()
const router = useRouter()
const records: Ref{{.LTStr}}{{.TableNamePascal}}[]{{.GTStr}} = ref([])
const pagedInfo: Ref<PagedInfo> = ref({
  orderBy: 'date_created',
  direction: PagedInfo.Direction.ASC,
  pageNumber: 1,
  limit: 25,
  total: 100,
  search: '',
})

const actions = computed(() => {
  return [
    {
      name: 'Create {{.TableNamePascal}}',
      iconLeft: 'far-heart',
      action: () => {
        create()
      },
    },
  ]
})

function changePageInfo(pi: PagedInfo) {
  pagedInfo.value = pi
  loadData()
}

async function loadData() {
  const resp = await {{.TableNameCamel}}Api.paged{{.TableNamePluralPascal}}(pagedInfo.value)
  pagedInfo.value = resp.pagedInfo
  records.value = resp.records
}

function create() {
  router.push({ name: '{{.TableNamePascal}}Create' })
}

function edit({{.TableNameCamel}}Ulid: string) {
  router.push({ name: '{{.TableNamePascal}}Edit', params: { ulid: {{.TableNameCamel}}Ulid } })
}

function sort(a: any) {
}

function pageChange(a: any) {
}


watch(
  () => route.name,
  (routeName) => {
    if (routeName === '{{.TableNamePascal}}List') {
      loadData()
    }
  },
  { flush: 'pre', immediate: true, deep: true }
)


{{.LTStr}}/script{{.GTStr}}
