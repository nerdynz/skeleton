<template>
  <with-actions class="fh-card p-4">
    <template #left>
      <h2 class="title is-2 mb-0">{{.TableNamePascal}}s</h2>
    </template>
    <template #right>
      <form-field for="search" icon="far-search" label="Search" class="with-button">
        <input class="input" name="search" v-model.trim="pagedInfo.search" type="text" @keyup.enter="loadData" @keyup.esc="pagedInfo.search = ''" autocomplete="off" />
      </form-field>
      <button class="button is-primary" @click="actions.find((a:any) => a.name === 'Create {{.TableNamePascal}}')?.action">Create {{.TableNamePascal}}</button>
    </template>
    <data-table class="is-fullwidth is-stripped" :columns="columns" :rows="rows" :paged-info="pagedInfo" @change="changePageInfo">
      {{.LTStr}}!-- <template #colgroup>
        <colgroup>
          <col width="100px" />
          <col width="200px" />
          <col width="100px" />
          <col width="auto" />
          <col width="140px" />
          <col width="140px" />
        </colgroup>
      </template> --{{.GTStr}}
      <template #actions="{ row }">
        <o-button tag="a" @click="edit(row.{{.TableNameCamel}}Ulid)" class="is-light" size="small" icon-left="fad-pencil is-small">Edit</o-button>
      </template>
      <loading :on="['Load{{.TableNamePascalPlural}}']" />
    </data-table>
  </with-actions>
  <router-view />
</template>

{{.LTStr}}script lang="ts" setup{{.GTStr}}
import api from '@/api'
import { PagedInfo } from '@/api/pb/base.pb'
import { {{.TableNamePascal}} } from '@/api/pb/{{.TableNameCamel}}.pb'
import ColumnMeta from '@nerdynz/componenty/src/types/ColumnMeta'
import { computed, onMounted, ref, Ref } from 'vue'
import { useRouter } from 'vue-router'

const columns: Record<string, ColumnMeta> = {
  actions: {
    heading: '',
    format: 'custom',
    sortEnabled: false,
  },
{{range $index, $column := .Columns}}{{ if eq $column.ColumnNamePascal "ULID"}}{{ else if $column.IsID}}{{ else if $column.IsSort }}{{else}}
  {{$column.ColumnNameCamel}}: {
    heading: '{{$column.ColumnNameSplitTitle}}',
    format:  {{ if $column.IsDate }}'date'{{else}}'text'{{end}},
    align: 'left',
  },{{ end }}{{ end }}
}

const router = useRouter()
const rows: Ref{{.LTStr}}{{.TableNamePascal}}[]{{.GTStr}} = ref([])
const pagedInfo: Ref<PagedInfo> = ref({
  orderBy: 'date_created',
  direction: PagedInfo.Direction.ASC,
  pageNumber: 1,
  limit: 25,
  total: 100,
  search: '',
})

const actions = computed(() => {
  return [
    {
      name: 'Create {{.TableNamePascal}}',
      iconLeft: 'far-heart',
      action: () => {
        create()
      },
    },
  ]
})

function changePageInfo(pi: PagedInfo) {
  pagedInfo.value = pi
  loadData()
}

async function loadData() {
  const resp = await api.{{.TableNameCamel}}.paged{{.TableNamePluralPascal}}(pagedInfo.value)
  pagedInfo.value = resp.pagedInfo
  rows.value = resp.records
}

function create() {
  router.push({ name: '{{.TableNamePascal}}Create' })
}

function edit({{.TableNameCamel}}Ulid: string) {
  router.push({ name: '{{.TableNamePascal}}Edit', params: { ulid: {{.TableNameCamel}}Ulid } })
}

watch(
  () => route.name,
  (routeName) => {
    if (routeName === '{{.TableNamePascal}}List') {
      loadData()
    }
  },
  { flush: 'pre', immediate: true, deep: true }
)


{{.LTStr}}/script{{.GTStr}}
